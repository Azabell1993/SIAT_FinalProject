{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memID: '',\n      memPW: '',\n      memPWCheck: '',\n      memName: '',\n      memAddr: '',\n      memPhone: '',\n      memEmail: '',\n      memBirth: ''\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId() {\n      var IdCheckLogic = /^[a-z]+[a-z0-9]{5,19}$/g;\n      console.log('ID test');\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      }).then(function (idchk) {\n        if (idchk.data.data === 'false' || IdCheckLogic == memID) {\n          console.log(idchk.data.data);\n          console.log(IdCheckLogic);\n          alert(\"사용 가능한 아이디입니다.\");\n        } else {\n          console.log(idchk.data.data);\n          console.log(IdCheckLogic);\n          alert(\"사용 불가능한 아이디입니다. 중복이 되었거나 영문자 또는 숫자 6~20자로 만들어주십시오.\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value; // pw 입력\t\n\n      var mbrPwd = memPW.value;\n      var PwCheckLogic = '/^(?=.*[a-zA-z])(?=.*[0-9])(?=.*[$`~!@$!%*#^?&\\\\(\\\\)\\-_=+]).{8,16}$/.test(memPW.value)';\n\n      if (!PwCheckLogic) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      } else if (mbrPwd == mbrId) {\n        alert('아이디와 비밀번호가 같으면 안됩니다.');\n        return false;\n      }\n\n      return true;\n    }\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"AA8BA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,KAAK,EAAC,EADH;MAEHC,KAAK,EAAC,EAFH;MAGHC,UAAU,EAAC,EAHR;MAIHC,OAAO,EAAC,EAJL;MAKHC,OAAO,EAAC,EALL;MAMHC,QAAQ,EAAC,EANN;MAOHC,QAAQ,EAAC,EAPN;MAQHC,QAAQ,EAAC;IARN,CAAP;EAUD,CAZY;;EAabC,OAAO,EAAE;IACP;IACAC,OAAM,GAAK;MACT,IAAIC,YAAW,GAAI,yBAAnB;MAEAC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAjB,KAAK,CAACkB,IAAN,CAAW,uCAAX,EAAoD;QAClDb,KAAK,EAAE,KAAKA;MADsC,CAApD,EAGGc,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QACrB,IAAGA,KAAK,CAAChB,IAAN,CAAWA,IAAX,KAAoB,OAApB,IAA+BW,YAAW,IAAKV,KAAlD,EAAyD;UACvDW,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAChB,IAAN,CAAWA,IAAvB;UACAY,OAAO,CAACC,GAAR,CAAYF,YAAZ;UACAM,KAAK,CAAC,gBAAD,CAAL;QACF,CAJA,MAIO;UACLL,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAChB,IAAN,CAAWA,IAAvB;UACAY,OAAO,CAACC,GAAR,CAAYF,YAAZ;UACAM,KAAK,CAAC,oDAAD,CAAL;QACF;MAED,CAdH,EAcKC,KAdL,CAcW,UAAUC,KAAV,EAAiB;QACxBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CAhBH;IAiBD,CAvBM;;IAwBP;IACAC,OAAO,GAAG;MACR;MACA,IAAIC,KAAI,GAAIpB,KAAK,CAACqB,KAAlB,CAFQ,CAIR;;MACA,IAAIC,MAAK,GAAIrB,KAAK,CAACoB,KAAnB;MAEA,IAAIE,YAAW,GAAI,wFAAnB;;MAEA,IAAG,CAAEA,YAAL,EAAoB;QAClBP,KAAK,CAAC,sCAAD,CAAL;QACA,OAAO,KAAP;MACF,CAHA,MAGO,IAAGM,MAAK,IAAKF,KAAb,EAAoB;QACzBJ,KAAK,CAAC,sBAAD,CAAL;QACA,OAAO,KAAP;MACF;;MACA,OAAO,IAAP;IACF;;EA1CO,CAbI,CAwDX;;AAxDW,CAAf,C,CA0DE","names":["axios","defaults","headers","common","data","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","methods","checkId","IdCheckLogic","console","log","post","then","idchk","alert","catch","error","checkPw","mbrId","value","mbrPwd","PwCheckLogic"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <p>영문자로 시작하는 영문자 또는 숫자 6~20자</p>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\"><p id=\"userid_msg\"></p></label>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n      <p>8 ~ 16자 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\"></label><br>\n      <button>비밀번호 체크</button>\n      </form>\n      \n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n    };\n  },\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId () {\n      var IdCheckLogic = /^[a-z]+[a-z0-9]{5,19}$/g;\n\n      console.log('ID test')\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false' || IdCheckLogic == memID) {\n            console.log(idchk.data.data);\n            console.log(IdCheckLogic);\n            alert(\"사용 가능한 아이디입니다.\");\n          } else {\n            console.log(idchk.data.data);\n            console.log(IdCheckLogic);\n            alert(\"사용 불가능한 아이디입니다. 중복이 되었거나 영문자 또는 숫자 6~20자로 만들어주십시오.\");\n          }\n\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value;\n\n      // pw 입력\t\n      var mbrPwd = memPW.value;\n\n      var PwCheckLogic = '/^(?=.*[a-zA-z])(?=.*[0-9])(?=.*[$`~!@$!%*#^?&\\\\(\\\\)\\-_=+]).{8,16}$/.test(memPW.value)';   \n\n      if(!(PwCheckLogic)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\t\n      } else if(mbrPwd == mbrId) {\t\t\n        alert('아이디와 비밀번호가 같으면 안됩니다.');\t\t\n        return false;\t\n      }\n      return true;\n    }\n  } // methods\n\n} // export default\n\n</script>\n"]},"metadata":{},"sourceType":"module"}