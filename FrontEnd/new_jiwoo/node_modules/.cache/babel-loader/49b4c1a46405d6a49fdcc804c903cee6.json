{"ast":null,"code":"/*!\n  * Bootstrap swipe.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./config'), require('../dom/event-handler'), require('./index')) : typeof define === 'function' && define.amd ? define(['./config', '../dom/event-handler', './index'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Swipe = factory(global.Config, global.EventHandler, global.Index));\n})(this, function (Config, EventHandler, index) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);\n\n  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): util/swipe.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n\n  const NAME = 'swipe';\n  const EVENT_KEY = '.bs.swipe';\n  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY}`;\n  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY}`;\n  const EVENT_TOUCHEND = `touchend${EVENT_KEY}`;\n  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY}`;\n  const EVENT_POINTERUP = `pointerup${EVENT_KEY}`;\n  const POINTER_TYPE_TOUCH = 'touch';\n  const POINTER_TYPE_PEN = 'pen';\n  const CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  const SWIPE_THRESHOLD = 40;\n  const Default = {\n    endCallback: null,\n    leftCallback: null,\n    rightCallback: null\n  };\n  const DefaultType = {\n    endCallback: '(function|null)',\n    leftCallback: '(function|null)',\n    rightCallback: '(function|null)'\n  };\n  /**\n   * Class definition\n   */\n\n  class Swipe extends Config__default.default {\n    constructor(element, config) {\n      super();\n      this._element = element;\n\n      if (!element || !Swipe.isSupported()) {\n        return;\n      }\n\n      this._config = this._getConfig(config);\n      this._deltaX = 0;\n      this._supportPointerEvents = Boolean(window.PointerEvent);\n\n      this._initEvents();\n    } // Getters\n\n\n    static get Default() {\n      return Default;\n    }\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    dispose() {\n      EventHandler__default.default.off(this._element, EVENT_KEY);\n    } // Private\n\n\n    _start(event) {\n      if (!this._supportPointerEvents) {\n        this._deltaX = event.touches[0].clientX;\n        return;\n      }\n\n      if (this._eventIsPointerPenTouch(event)) {\n        this._deltaX = event.clientX;\n      }\n    }\n\n    _end(event) {\n      if (this._eventIsPointerPenTouch(event)) {\n        this._deltaX = event.clientX - this._deltaX;\n      }\n\n      this._handleSwipe();\n\n      index.execute(this._config.endCallback);\n    }\n\n    _move(event) {\n      this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n    }\n\n    _handleSwipe() {\n      const absDeltaX = Math.abs(this._deltaX);\n\n      if (absDeltaX <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      const direction = absDeltaX / this._deltaX;\n      this._deltaX = 0;\n\n      if (!direction) {\n        return;\n      }\n\n      index.execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n    }\n\n    _initEvents() {\n      if (this._supportPointerEvents) {\n        EventHandler__default.default.on(this._element, EVENT_POINTERDOWN, event => this._start(event));\n        EventHandler__default.default.on(this._element, EVENT_POINTERUP, event => this._end(event));\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        EventHandler__default.default.on(this._element, EVENT_TOUCHSTART, event => this._start(event));\n        EventHandler__default.default.on(this._element, EVENT_TOUCHMOVE, event => this._move(event));\n        EventHandler__default.default.on(this._element, EVENT_TOUCHEND, event => this._end(event));\n      }\n    }\n\n    _eventIsPointerPenTouch(event) {\n      return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n    } // Static\n\n\n    static isSupported() {\n      return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n    }\n\n  }\n\n  return Swipe;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;EAAA;;;;;;;EAWA;;;;;EAIA,MAAMA,IAAI,GAAG,OAAb;EACA,MAAMC,SAAS,GAAG,WAAlB;EACA,MAAMC,gBAAgB,GAAgBD,sBAAtC;EACA,MAAME,eAAe,GAAeF,qBAApC;EACA,MAAMG,cAAc,GAAcH,oBAAlC;EACA,MAAMI,iBAAiB,GAAiBJ,uBAAxC;EACA,MAAMK,eAAe,GAAeL,qBAApC;EACA,MAAMM,kBAAkB,GAAG,OAA3B;EACA,MAAMC,gBAAgB,GAAG,KAAzB;EACA,MAAMC,wBAAwB,GAAG,eAAjC;EACA,MAAMC,eAAe,GAAG,EAAxB;EAEA,MAAMC,OAAO,GAAG;IACdC,WAAW,EAAE,IADC;IAEdC,YAAY,EAAE,IAFA;IAGdC,aAAa,EAAE;EAHD,CAAhB;EAMA,MAAMC,WAAW,GAAG;IAClBH,WAAW,EAAE,iBADK;IAElBC,YAAY,EAAE,iBAFI;IAGlBC,aAAa,EAAE;EAHG,CAApB;EAMA;;;;EAIA,MAAME,KAAN,SAAoBC,uBAApB,CAA2B;IACzBC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;MAC3B;MACA,KAAKC,QAAL,GAAgBF,OAAhB;;MAEA,IAAI,CAACA,OAAD,IAAY,CAACH,KAAK,CAACM,WAANN,EAAjB,EAAsC;QACpC;MACD;;MAED,KAAKO,OAAL,GAAe,KAAKC,UAAL,CAAgBJ,MAAhB,CAAf;MACA,KAAKK,OAAL,GAAe,CAAf;MACA,KAAKC,qBAAL,GAA6BC,OAAO,CAACC,MAAM,CAACC,YAAR,CAApC;;MACA,KAAKC,WAAL;IAZuB;;;IAgBP,WAAPnB,OAAO,GAAG;MACnB,OAAOA,OAAP;IACD;;IAEqB,WAAXI,WAAW,GAAG;MACvB,OAAOA,WAAP;IACD;;IAEc,WAAJf,IAAI,GAAG;MAChB,OAAOA,IAAP;IAzBuB;;;IA6BzB+B,OAAO,GAAG;MACRC,8BAAaC,GAAbD,CAAiB,KAAKX,QAAtBW,EAAgC/B,SAAhC+B;IA9BuB;;;IAkCzBE,MAAM,CAACC,KAAD,EAAQ;MACZ,IAAI,CAAC,KAAKT,qBAAV,EAAiC;QAC/B,KAAKD,OAAL,GAAeU,KAAK,CAACC,OAAND,CAAc,CAAdA,EAAiBE,OAAhC;QAEA;MACD;;MAED,IAAI,KAAKC,uBAAL,CAA6BH,KAA7B,CAAJ,EAAyC;QACvC,KAAKV,OAAL,GAAeU,KAAK,CAACE,OAArB;MACD;IACF;;IAEDE,IAAI,CAACJ,KAAD,EAAQ;MACV,IAAI,KAAKG,uBAAL,CAA6BH,KAA7B,CAAJ,EAAyC;QACvC,KAAKV,OAAL,GAAeU,KAAK,CAACE,OAANF,GAAgB,KAAKV,OAApC;MACD;;MAED,KAAKe,YAAL;;MACAC,cAAQ,KAAKlB,OAAL,CAAaX,WAArB6B;IACD;;IAEDC,KAAK,CAACP,KAAD,EAAQ;MACX,KAAKV,OAAL,GAAeU,KAAK,CAACC,OAAND,IAAiBA,KAAK,CAACC,OAAND,CAAcQ,MAAdR,GAAuB,CAAxCA,GACb,CADaA,GAEbA,KAAK,CAACC,OAAND,CAAc,CAAdA,EAAiBE,OAAjBF,GAA2B,KAAKV,OAFlC;IAGD;;IAEDe,YAAY,GAAG;MACb,MAAMI,SAAS,GAAGC,IAAI,CAACC,GAALD,CAAS,KAAKpB,OAAdoB,CAAlB;;MAEA,IAAID,SAAS,IAAIlC,eAAjB,EAAkC;QAChC;MACD;;MAED,MAAMqC,SAAS,GAAGH,SAAS,GAAG,KAAKnB,OAAnC;MAEA,KAAKA,OAAL,GAAe,CAAf;;MAEA,IAAI,CAACsB,SAAL,EAAgB;QACd;MACD;;MAEDN,cAAQM,SAAS,GAAG,CAAZA,GAAgB,KAAKxB,OAAL,CAAaT,aAA7BiC,GAA6C,KAAKxB,OAAL,CAAaV,YAAlE4B;IACD;;IAEDX,WAAW,GAAG;MACZ,IAAI,KAAKJ,qBAAT,EAAgC;QAC9BM,8BAAagB,EAAbhB,CAAgB,KAAKX,QAArBW,EAA+B3B,iBAA/B2B,EAAkDG,KAAK,IAAI,KAAKD,MAAL,CAAYC,KAAZ,CAA3DH;QACAA,8BAAagB,EAAbhB,CAAgB,KAAKX,QAArBW,EAA+B1B,eAA/B0B,EAAgDG,KAAK,IAAI,KAAKI,IAAL,CAAUJ,KAAV,CAAzDH;;QAEA,KAAKX,QAAL,CAAc4B,SAAd,CAAwBC,GAAxB,CAA4BzC,wBAA5B;MAJF,OAKO;QACLuB,8BAAagB,EAAbhB,CAAgB,KAAKX,QAArBW,EAA+B9B,gBAA/B8B,EAAiDG,KAAK,IAAI,KAAKD,MAAL,CAAYC,KAAZ,CAA1DH;QACAA,8BAAagB,EAAbhB,CAAgB,KAAKX,QAArBW,EAA+B7B,eAA/B6B,EAAgDG,KAAK,IAAI,KAAKO,KAAL,CAAWP,KAAX,CAAzDH;QACAA,8BAAagB,EAAbhB,CAAgB,KAAKX,QAArBW,EAA+B5B,cAA/B4B,EAA+CG,KAAK,IAAI,KAAKI,IAAL,CAAUJ,KAAV,CAAxDH;MACD;IACF;;IAEDM,uBAAuB,CAACH,KAAD,EAAQ;MAC7B,OAAO,KAAKT,qBAAL,KAA+BS,KAAK,CAACgB,WAANhB,KAAsB3B,gBAAtB2B,IAA0CA,KAAK,CAACgB,WAANhB,KAAsB5B,kBAA/F,CAAP;IA7FuB;;;IAiGP,OAAXe,WAAW,GAAG;MACnB,OAAO,kBAAkB8B,QAAQ,CAACC,eAA3B,IAA8CC,SAAS,CAACC,cAAVD,GAA2B,CAAhF;IACD;;EAnGwB","names":["NAME","EVENT_KEY","EVENT_TOUCHSTART","EVENT_TOUCHMOVE","EVENT_TOUCHEND","EVENT_POINTERDOWN","EVENT_POINTERUP","POINTER_TYPE_TOUCH","POINTER_TYPE_PEN","CLASS_NAME_POINTER_EVENT","SWIPE_THRESHOLD","Default","endCallback","leftCallback","rightCallback","DefaultType","Swipe","Config","constructor","element","config","_element","isSupported","_config","_getConfig","_deltaX","_supportPointerEvents","Boolean","window","PointerEvent","_initEvents","dispose","EventHandler","off","_start","event","touches","clientX","_eventIsPointerPenTouch","_end","_handleSwipe","execute","_move","length","absDeltaX","Math","abs","direction","on","classList","add","pointerType","document","documentElement","navigator","maxTouchPoints"],"sources":["../../src/util/swipe.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): util/swipe.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Config from './config'\nimport EventHandler from '../dom/event-handler'\nimport { execute } from './index'\n\n/**\n * Constants\n */\n\nconst NAME = 'swipe'\nconst EVENT_KEY = '.bs.swipe'\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY}`\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY}`\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY}`\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY}`\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY}`\nconst POINTER_TYPE_TOUCH = 'touch'\nconst POINTER_TYPE_PEN = 'pen'\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event'\nconst SWIPE_THRESHOLD = 40\n\nconst Default = {\n  endCallback: null,\n  leftCallback: null,\n  rightCallback: null\n}\n\nconst DefaultType = {\n  endCallback: '(function|null)',\n  leftCallback: '(function|null)',\n  rightCallback: '(function|null)'\n}\n\n/**\n * Class definition\n */\n\nclass Swipe extends Config {\n  constructor(element, config) {\n    super()\n    this._element = element\n\n    if (!element || !Swipe.isSupported()) {\n      return\n    }\n\n    this._config = this._getConfig(config)\n    this._deltaX = 0\n    this._supportPointerEvents = Boolean(window.PointerEvent)\n    this._initEvents()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  dispose() {\n    EventHandler.off(this._element, EVENT_KEY)\n  }\n\n  // Private\n  _start(event) {\n    if (!this._supportPointerEvents) {\n      this._deltaX = event.touches[0].clientX\n\n      return\n    }\n\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX\n    }\n  }\n\n  _end(event) {\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX - this._deltaX\n    }\n\n    this._handleSwipe()\n    execute(this._config.endCallback)\n  }\n\n  _move(event) {\n    this._deltaX = event.touches && event.touches.length > 1 ?\n      0 :\n      event.touches[0].clientX - this._deltaX\n  }\n\n  _handleSwipe() {\n    const absDeltaX = Math.abs(this._deltaX)\n\n    if (absDeltaX <= SWIPE_THRESHOLD) {\n      return\n    }\n\n    const direction = absDeltaX / this._deltaX\n\n    this._deltaX = 0\n\n    if (!direction) {\n      return\n    }\n\n    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback)\n  }\n\n  _initEvents() {\n    if (this._supportPointerEvents) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event))\n      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event))\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT)\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event))\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event))\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event))\n    }\n  }\n\n  _eventIsPointerPenTouch(event) {\n    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)\n  }\n\n  // Static\n  static isSupported() {\n    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0\n  }\n}\n\nexport default Swipe\n"]},"metadata":{},"sourceType":"script"}