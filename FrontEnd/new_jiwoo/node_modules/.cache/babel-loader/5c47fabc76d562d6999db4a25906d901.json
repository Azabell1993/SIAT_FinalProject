{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memID: '',\n      memPW: '',\n      memPWCheck: '',\n      memName: '',\n      memAddr: '',\n      memPhone: '',\n      memEmail: '',\n      memBirth: ''\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.memID\n      }).then(function (idchk) {\n        console.log(idchk.data);\n        console.log(idchk.data.mem.memID);\n        console.log(idchk.data.mem.memRole.roleCode); //this.$emit(res.data.mem.memID)\n      }).catch(function (error) {\n        console.log(error);\n        alert('중복된 아이디입니다.');\n      });\n    },\n\n    /* DB에 정보 내보내기  */\n    sendDB() {\n      console.log('DB test');\n      axios.post('http://192.168.0.81:9292/', {\n        memID: '',\n        memPW: '',\n        memPWCheck: '',\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      }).then(function () {// console.log(res.data)\n        // console.log(res.data.mem.memID)\n        // console.log(res.data.mem.memRole.roleCode)\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n  } // methods\n\n}; // export default\n\nconst username = document.getElementById(\"memID\");\nconst email = document.getElementById(\"memEmail\");\nconst password = document.getElementById(\"memPW\");\nconst repassword = document.getElementById(\"memPWCheck\");\nconst notice = document.querySelector(\".notice\");\nconst nameValidation = /^[a-z0-9_-]{2,20}$/;\nconst emailValidation = /^[A-Za-z0-9_\\.\\-]+@[A-Za-z0-9\\-]+\\.[A-Za-z0-9\\-]+/;\nconst pwValidation = /^.*(?=^.{8,16}$)(?=.*\\d)(?=.*[a-zA-Z])(?=.*[~,!,@,#,$,*,(,),=,+,_,.,|]).*$/;\n\nfunction isValidName(input) {\n  if (nameValidation.test(input.value.trim())) {\n    showSuccess(input);\n  } else {\n    showError(input, \"Name is more than 2 characters\");\n  }\n\n  form.addEventListener(\"submit\", function (e) {\n    e.preventDefault();\n    checkRequired([username, email, password, repassword]);\n    isValidName(username);\n    isValidEmail(email);\n    isValidPw(password);\n    checkPasswordsMatch(password, repassword);\n  });\n\n  function getFieldName(input) {\n    return input.id.charAt(0).toUpperCase() + input.id.slice(1);\n  }\n\n  function checkPasswordsMatch(input1, input2) {\n    if (input1.value !== input2.value) {\n      showError(input2, \"Passwords do not match\");\n    }\n  }\n\n  function allRequired() {\n    notice.classList.add(\"show\");\n    setTimeout(() => {\n      notice.classList.remove(\"show\");\n    }, 2000);\n  }\n}","map":{"version":3,"mappings":"AAwBA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,KAAK,EAAC,EADH;MAEHC,KAAK,EAAC,EAFH;MAGHC,UAAU,EAAC,EAHR;MAIHC,OAAO,EAAC,EAJL;MAKHC,OAAO,EAAC,EALL;MAMHC,QAAQ,EAAC,EANN;MAOHC,QAAQ,EAAC,EAPN;MAQHC,QAAQ,EAAC;IARN,CAAP;EAUD,CAZY;;EAcbC,OAAO,EAAE;IACP;IACAC,OAAM,GAAK;MACTC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAhB,KAAK,CAACiB,IAAN,CAAW,sCAAX,EAAmD;QACjDZ,KAAK,EAAE,KAAKA;MADqC,CAAnD,EAGGa,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QACrBJ,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACf,IAAlB;QACAW,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACf,IAAN,CAAWgB,GAAX,CAAef,KAA3B;QACAU,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACf,IAAN,CAAWgB,GAAX,CAAeC,OAAf,CAAuBC,QAAnC,EAHqB,CAIrB;MACD,CARH,EAQKC,KARL,CAQW,UAAUC,KAAV,EAAiB;QACxBT,OAAO,CAACC,GAAR,CAAYQ,KAAZ;QACAC,KAAK,CAAC,aAAD,CAAL;MACD,CAXH;IAYD,CAhBM;;IAiBP;IACAC,MAAK,GAAK;MACRX,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAhB,KAAK,CAACiB,IAAN,CAAW,2BAAX,EAAwC;QACtCZ,KAAK,EAAC,EADgC;QAEtCC,KAAK,EAAC,EAFgC;QAGtCC,UAAU,EAAC,EAH2B;QAItCC,OAAO,EAAC,EAJ8B;QAKtCC,OAAO,EAAC,EAL8B;QAMtCC,QAAQ,EAAC,EAN6B;QAOtCC,QAAQ,EAAC,EAP6B;QAQtCC,QAAQ,EAAC;MAR6B,CAAxC,EAUGM,IAVH,CAUQ,YAAY,CAChB;QACA;QACA;MACD,CAdH,EAcKK,KAdL,CAcW,UAAUC,KAAV,EAAiB;QACxBT,OAAO,CAACC,GAAR,CAAYQ,KAAZ;MACD,CAhBH;IAiBF;;EArCO,CAdI,CAqDX;;AArDW,CAAf,C,CAuDE;;AAEF,MAAMG,QAAO,GAAIC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAjB;AACA,MAAMC,KAAI,GAAIF,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAd;AACA,MAAME,QAAO,GAAIH,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAjB;AACA,MAAMG,UAAS,GAAIJ,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAnB;AACA,MAAMI,MAAK,GAAIL,QAAQ,CAACM,aAAT,CAAuB,SAAvB,CAAf;AACA,MAAMC,cAAa,GAAI,oBAAvB;AACA,MAAMC,eAAc,GAAI,mDAAxB;AACA,MAAMC,YAAW,GAAI,4EAArB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,IAAIJ,cAAc,CAACK,IAAf,CAAoBD,KAAK,CAACE,KAAN,CAAYC,IAAZ,EAApB,CAAJ,EAA6C;IAC3CC,WAAW,CAACJ,KAAD,CAAX;EACF,CAFA,MAEO;IACLK,SAAS,CAACL,KAAD,EAAQ,gCAAR,CAAT;EACF;;EAGFM,IAAI,CAACC,gBAAL,CAAsB,QAAtB,EAAgC,UAAUC,CAAV,EAAa;IAC3CA,CAAC,CAACC,cAAF;IAEAC,aAAa,CAAC,CAACtB,QAAD,EAAWG,KAAX,EAAkBC,QAAlB,EAA4BC,UAA5B,CAAD,CAAb;IACAM,WAAW,CAACX,QAAD,CAAX;IACAuB,YAAY,CAACpB,KAAD,CAAZ;IACAqB,SAAS,CAACpB,QAAD,CAAT;IACAqB,mBAAmB,CAACrB,QAAD,EAAWC,UAAX,CAAnB;EACD,CARD;;EAUA,SAASqB,YAAT,CAAsBd,KAAtB,EAA6B;IAC3B,OAAOA,KAAK,CAACe,EAAN,CAASC,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCjB,KAAK,CAACe,EAAN,CAASG,KAAT,CAAe,CAAf,CAA1C;EACF;;EAEA,SAASL,mBAAT,CAA6BM,MAA7B,EAAqCC,MAArC,EAA6C;IAC3C,IAAID,MAAM,CAACjB,KAAP,KAAiBkB,MAAM,CAAClB,KAA5B,EAAmC;MACjCG,SAAS,CAACe,MAAD,EAAS,wBAAT,CAAT;IACF;EACF;;EAEA,SAASC,WAAT,GAAuB;IACrB3B,MAAM,CAAC4B,SAAP,CAAiBC,GAAjB,CAAqB,MAArB;IACAC,UAAU,CAAC,MAAM;MACf9B,MAAM,CAAC4B,SAAP,CAAiBG,MAAjB,CAAwB,MAAxB;IACD,CAFS,EAEP,IAFO,CAAV;EAGF;AACA","names":["axios","defaults","headers","common","data","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","methods","checkId","console","log","post","then","idchk","mem","memRole","roleCode","catch","error","alert","sendDB","username","document","getElementById","email","password","repassword","notice","querySelector","nameValidation","emailValidation","pwValidation","isValidName","input","test","value","trim","showSuccess","showError","form","addEventListener","e","preventDefault","checkRequired","isValidEmail","isValidPw","checkPasswordsMatch","getFieldName","id","charAt","toUpperCase","slice","input1","input2","allRequired","classList","add","setTimeout","remove"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"sendPost\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\"><p id=\"userid_msg\"></p></label>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\"></label><br>\n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n          console.log(idchk.data)\n          console.log(idchk.data.mem.memID)\n          console.log(idchk.data.mem.memRole.roleCode)\n          //this.$emit(res.data.mem.memID)\n        }).catch(function (error) {\n          console.log(error)\n          alert('중복된 아이디입니다.')\n        })\n    },\n    /* DB에 정보 내보내기  */\n    sendDB () {\n      console.log('DB test')\n      axios.post('http://192.168.0.81:9292/', {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n      })\n        .then(function () {\n          // console.log(res.data)\n          // console.log(res.data.mem.memID)\n          // console.log(res.data.mem.memRole.roleCode)\n        }).catch(function (error) {\n          console.log(error)\n        })\n    }\n\n  } // methods\n\n} // export default\n\nconst username = document.getElementById(\"memID\");\nconst email = document.getElementById(\"memEmail\");\nconst password = document.getElementById(\"memPW\");\nconst repassword = document.getElementById(\"memPWCheck\");\nconst notice = document.querySelector(\".notice\");\nconst nameValidation = /^[a-z0-9_-]{2,20}$/;\nconst emailValidation = /^[A-Za-z0-9_\\.\\-]+@[A-Za-z0-9\\-]+\\.[A-Za-z0-9\\-]+/;\nconst pwValidation = /^.*(?=^.{8,16}$)(?=.*\\d)(?=.*[a-zA-Z])(?=.*[~,!,@,#,$,*,(,),=,+,_,.,|]).*$/;\n\nfunction isValidName(input) {\n  if (nameValidation.test(input.value.trim())) {\n    showSuccess(input);\n  } else {\n    showError(input, \"Name is more than 2 characters\");\n  }\n  \n\nform.addEventListener(\"submit\", function (e) {\n  e.preventDefault();\n\n  checkRequired([username, email, password, repassword]);\n  isValidName(username);\n  isValidEmail(email);\n  isValidPw(password);\n  checkPasswordsMatch(password, repassword);\n});\n\nfunction getFieldName(input) {\n  return input.id.charAt(0).toUpperCase() + input.id.slice(1);\n}\n\nfunction checkPasswordsMatch(input1, input2) {\n  if (input1.value !== input2.value) {\n    showError(input2, \"Passwords do not match\");\n  }\n}\n\nfunction allRequired() {\n  notice.classList.add(\"show\");\n  setTimeout(() => {\n    notice.classList.remove(\"show\");\n  }, 2000);\n}\n}\n\n</script>"]},"metadata":{},"sourceType":"module"}