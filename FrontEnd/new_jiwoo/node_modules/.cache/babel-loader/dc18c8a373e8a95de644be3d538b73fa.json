{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      signup: {\n        memID: null,\n        memPW: null,\n        memPWCheck: null,\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      },\n      idCheck: '',\n      passwordCheck: '',\n      passwordValidFlag: true\n    };\n  },\n\n  computed: {\n    idValid() {\n      if (/^[A-Za-z0-9]+$/.test(this.signup.memID)) {\n        this.idCheck = true;\n      } else {\n        this.idCheck = false;\n      }\n    }\n\n  },\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.signup.memID\n      }).then(function (idchk) {\n        if (idchk.computed.idValid === false) {\n          alert(\"사용 가능\");\n        } else {\n          alert(\"사용 불가\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    }\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"AA+BA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,MAAM,EAAE;QACNC,KAAK,EAAC,IADA;QAENC,KAAK,EAAC,IAFA;QAGNC,UAAU,EAAC,IAHL;QAINC,OAAO,EAAC,EAJF;QAKNC,OAAO,EAAC,EALF;QAMNC,QAAQ,EAAC,EANH;QAONC,QAAQ,EAAC,EAPH;QAQNC,QAAQ,EAAC;MARH,CADL;MAWDC,OAAO,EAAC,EAXP;MAYDC,aAAa,EAAE,EAZd;MAaDC,iBAAiB,EAAE;IAblB,CAAP;EAgBD,CAlBY;;EAmBbC,QAAQ,EAAE;IACRC,OAAM,GAAK;MACT,IAAG,iBAAiBC,IAAjB,CAAsB,KAAKd,MAAL,CAAYC,KAAlC,CAAH,EAA6C;QAC3C,KAAKQ,OAAL,GAAe,IAAf;MACF,CAFA,MAEO;QACL,KAAKA,OAAL,GAAe,KAAf;MACF;IACF;;EAPQ,CAnBG;EA4BbM,OAAO,EAAE;IACP;IACAC,aAAY,GAAK;MACf,IAAI,6CAA6CF,IAA7C,CAAkD,KAAKd,MAAL,CAAYE,KAA9D,CAAJ,EAA0E;QACxE,KAAKS,iBAAL,GAAyB,IAAzB;MACF,CAFA,MAEO;QACL,KAAKA,iBAAL,GAAyB,KAAzB;MACF;IACD,CARM;;IASNM,kBAAiB,GAAK;MACrB,IAAI,KAAKjB,MAAL,CAAYE,KAAZ,KAAsB,KAAKQ,aAA/B,EAA8C;QAC5C,KAAKQ,iBAAL,GAAyB,IAAzB;MACF,CAFA,MAEO;QACL,KAAKA,iBAAL,GAAyB,KAAzB;MACF;IACD,CAfM;;IAgBP;IACAC,OAAM,GAAK;MACTC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACA1B,KAAK,CAAC2B,IAAN,CAAW,uCAAX,EAAoD;QAClDrB,KAAK,EAAE,KAAKD,MAAL,CAAYC;MAD+B,CAApD,EAGGsB,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QACrB,IAAGA,KAAK,CAACZ,QAAN,CAAeC,OAAf,KAA2B,KAA9B,EAAqC;UACnCY,KAAK,CAAC,OAAD,CAAL;QAEF,CAHA,MAGO;UACLA,KAAK,CAAC,OAAD,CAAL;QACF;MAED,CAXH,EAWKC,KAXL,CAWW,UAAUC,KAAV,EAAiB;QACxBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CAbH;IAeD,CAlCM;;IAmCP;IACAC,OAAO,GAAG;MACR;MAGA,IAAG,CAAE,KAAKjB,iBAAV,EAA8B;QAC5Bc,KAAK,CAAC,sCAAD,CAAL;QACA,OAAO,KAAP;MACF;;MACAA,KAAK,CAAC,kBAAD,CAAL;MACA,OAAO,IAAP;IACF;;EA9CO,CA5BI,CA2EX;;AA3EW,CAAf,C,CA6EE","names":["axios","defaults","headers","common","data","signup","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","idCheck","passwordCheck","passwordValidFlag","computed","idValid","test","methods","passwordValid","passwordCheckValid","passwordCheckFlag","checkId","console","log","post","then","idchk","alert","catch","error","checkPw"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\" ><p id=\"userid_msg\"></p></label>\n          <div v-if=\"!idValid\">유효하지 않은 아이디입니다.</div>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n      <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\"></label><br>\n      <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n      <button>비밀번호 체크</button>\n      </form>\n      \n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"signup.memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"signup.memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        signup: {\n          memID:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:'',\n          memAddr:'',\n          memPhone:'',\n          memEmail:'',\n          memBirth:''\n          },\n          idCheck:'',\n          passwordCheck: '',\n          passwordValidFlag: true\n    };\n    \n  },\n  computed: {\n    idValid () {\n      if(/^[A-Za-z0-9]+$/.test(this.signup.memID)) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    }\n  },\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.computed.idValid === false) {\n            alert(\"사용 가능\");\n\n          } else {\n            alert(\"사용 불가\");\n          }\n\n        }).catch(function (error) {\n          console.log(error)\n        })\n\n    },\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n\n\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    }\n  } // methods\n\n} // export default\n\n\n</script>\n"]},"metadata":{},"sourceType":"module"}