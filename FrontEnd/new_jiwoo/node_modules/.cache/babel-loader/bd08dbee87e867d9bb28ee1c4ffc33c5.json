{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.recommendProduct, name => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      id: \"productList\",\n      key: name\n    }, [_createVNode(_component_router_link, {\n      onClick: $event => $options.productInfoRelay(name.proCode),\n      to: \"/productdetail\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"p\", null, _toDisplayString(name.proName), 1\n      /* TEXT */\n      )]),\n      _: 2\n      /* DYNAMIC */\n\n    }, 1032\n    /* PROPS, DYNAMIC_SLOTS */\n    , [\"onClick\"]), _createCommentVNode(\" 이미지 부분은 아직 미구현, \\n      현재 백엔드에서 이미지 정보 주는 것 까진 확인. 프론트에서 어떻게 뿌리는지 연구해봐야 함 \"), _createCommentVNode(\" <img v-bind:src=\\\"require(`@/assets/image/${name.proImage}.png`)\\\"> \"), _createElementVNode(\"p\", null, _toDisplayString(name.proPrice), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;2BACEA,oBAQMC,SARN,EAQM,IARN,EAQMC,YARiDC,sBAQjD,EARyCC,IAAwB,IAApB;yBAAnDJ,oBAQM,KARN,EAQM;MARDK,EAAE,EAAC,aAQF;MARuBC,GAAG,EAAEF;IAQ5B,CARN,GACEG,aAEcC,sBAFd,EAEc;MAFIC,OAAK,YAAEC,0BAAiBN,IAAI,CAACO,OAAtB,CAEX;MAF2CC,EAAE,EAAC;IAE9C,CAFd;wBACE,MAAyB,CAAzBC,oBAAyB,GAAzB,EAAyB,IAAzB,EAAyBC,iBAAnBV,IAAI,CAACW,OAAc,CAAzB,EAAkB;MAAA;MAAlB,CAAyB;;;;KAD3B;;IAAA,gBAGEC,qGAEAA,8FACAH,oBAA0B,GAA1B,EAA0B,IAA1B,EAA0BC,iBAApBV,IAAI,CAACa,QAAe,CAA1B,EAAmB;IAAA;IAAnB,EAPJ;GAQM,CARN;;EAAA","names":["_createElementBlock","_Fragment","_renderList","$data","name","id","key","_createVNode","_component_router_link","onClick","$options","proCode","to","_createElementVNode","_toDisplayString","proName","_createCommentVNode","proPrice"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/components/ProductList.vue"],"sourcesContent":["<template>\n  <div id=\"productList\" v-bind:key=\"name\" v-for=\"name in recommendProduct\">\n    <router-link v-on:click=\"productInfoRelay(name.proCode)\" to=\"/productdetail\">\n      <p>{{ name.proName }}</p>\n    </router-link>\n      <!-- 이미지 부분은 아직 미구현, \n      현재 백엔드에서 이미지 정보 주는 것 까진 확인. 프론트에서 어떻게 뿌리는지 연구해봐야 함 -->\n      <!-- <img v-bind:src=\"require(`@/assets/image/${name.proImage}.png`)\"> -->\n      <p>{{ name.proPrice }}</p>\n  </div>\n</template>\n\n<script>\nimport storeProduct from '@/store/recommendProducts'\nimport axios from 'axios'\n\nconst url = 'http://192.168.0.81:9292'\n\nexport default {\n  data () {\n    return {\n      items: [\n        {\n          imgurl: require('@/assets/image/top1.png'),\n        },\n      ],\n      productInfos: [],\n      recommendProduct: [],\n    }\n  },\n  computed: {\n  \n  },\n  methods: {\n    //상품 코드를 인자로 받아서, 제품 상세 페이지로 이동시킨다.\n    async productInfoRelay (newProCode) {\n      console.log('값 확인 : ', newProCode)\n      const renewList = storeProduct.state.products.productsList //저장소에 있는 상품 리스트 값\n      console.log(String(Object.values(renewList)).includes(newProCode)) \n      //=> Object형식으로 들어와서, 객체 내의 값을 String값으로 변환시켜서 맞는지 체크시킴,\n      //그 후, 인자 값을 받아서 그 배열 안에 해당 상품코드가 있는지 확인 시킨다.\n      \n      const oneCodeCheck = String(Object.values(renewList)).includes(newProCode)\n\n      if(oneCodeCheck == true) { //상품코드가 있다면, 그 상품코드로 상품 정보 요청\n        await axios.post(url+'/pro/proInfo', {\n          proCode : newProCode\n        })\n        .then(function(response){\n          storeProduct.commit('updateSelectOneProductCode',response.data.data.proCode)\n          //상품 한개만 요청하기 때문에, selectOne으로 지정하고, 각 상품이 클릭시 때마다 업데이트 시킴.\n          //한 상품 클릭 후, 다른 상품 클릭시 해당 상품으로 가는 것까지 확인 됨\n          console.log('ProductList code : ',storeProduct.state.selectOneProductCode)\n        })\n      }\n      else {\n        console.log('상품 정보가 존재하지 않습니다.')\n      }\n    }\n  },\n  //상품 리스트 부분, 페이지가 생성될 때 갖고있는 상품들을 불러와줘야한다.\n  created () {\n    var vm = this\n    axios.post(url+'/pro/proList', //헤더 : url, value\n    {\n      proList: [1,2,3,4]\n    }) //추천 알고리즘을 만든 곳으로 전달\n        .then(async function (response) {\n          vm.productInfos = response.data\n          console.log(response.data.data)\n          storeProduct.commit('updateProductList',response.data.data)\n          console.log('저장소에 있는 값 : ',storeProduct.state.products.productsList);\n          const proCodeList = storeProduct.state.products.productsList\n          \n          for(var i=0; i<proCodeList.length; i++) {\n\t          // console.log('proCode : ', proCodeList[i])\n              await axios.post(url+'/pro/proInfo',\n              { \n                proCode: proCodeList[i]\n              })\n              .then(function (response) {\n                console.log('상품 정보 : ',response.data.data)\n                // console.log('이미지 정보 : ',response.data.data.imageID)\n                // console.log(vm.recommendProduct)\n                vm.recommendProduct.push(response.data.data)\n              })\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n},\n\n}\n</script>\n\n<style>\n  img {\n    width : 180px;\n    height: 180px;\n  }\n  #productList {\n    display: inline-block;\n    padding : 10px;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}