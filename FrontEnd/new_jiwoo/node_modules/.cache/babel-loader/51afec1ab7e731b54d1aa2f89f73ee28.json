{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memID: '',\n      memPW: '',\n      memPWCheck: '',\n      memName: '',\n      memAddr: '',\n      memPhone: '',\n      memEmail: '',\n      memBirth: ''\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      }).then(function (idchk) {\n        /*test*/\n\n        /*\n        console.log('1')\n        console.log(idchk)\n         console.log('2')\n        console.log(idchk.data)\n         console.log('3')\n        console.log(idchk.data.data)\n        */\n        if (idchk.data.data === 'false') {\n          alert(\"사용 가능\");\n        } else {\n          alert(\"사용 불가\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* DB에 정보 내보내기  */\n    sendDB() {\n      console.log('DB test');\n      axios.post('http://192.168.0.107:9292/', {\n        memID: '',\n        memPW: '',\n        memPWCheck: '',\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      }).then(function () {// console.log(res.data)\n        // console.log(res.data.mem.memID)\n        // console.log(res.data.mem.memRole.roleCode)\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* ??? */\n\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value; // pw 입력\t\n\n      var mbrPwd = memPW.value; //영문,숫자\t\n\n      var check1 = /^(?=.*[a-zA-Z])(?=.*[0-9]).{10,12}$/.test(memPW); //영문,특수문자\t\n\n      var check2 = /^(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{10,12}$/.test(memPW); //특수문자, 숫자\t\n\n      var check3 = /^(?=.*[^a-zA-Z0-9])(?=.*[0-9]).{10,12}$/.test(memPW);\n\n      if (!(check1 || check2 || check3)) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      if (/(\\w)\\1\\1/.test(mbrPwd)) {\n        alert('같은 문자를 3번 이상 사용하실 수 없습니다.\\n패스워드 설정안내를 확인해 주세요.');\n        return false;\n      }\n\n      if (mbrPwd.search(mbrId) > -1) {\n        alert(\"비밀번호에 아이디가 포함되었습니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      return true;\n    }\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"AA4BA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,KAAK,EAAC,EADH;MAEHC,KAAK,EAAC,EAFH;MAGHC,UAAU,EAAC,EAHR;MAIHC,OAAO,EAAC,EAJL;MAKHC,OAAO,EAAC,EALL;MAMHC,QAAQ,EAAC,EANN;MAOHC,QAAQ,EAAC,EAPN;MAQHC,QAAQ,EAAC;IARN,CAAP;EAUD,CAZY;;EAabC,OAAO,EAAE;IACP;IACAC,OAAM,GAAK;MACTC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAhB,KAAK,CAACiB,IAAN,CAAW,uCAAX,EAAoD;QAClDZ,KAAK,EAAE,KAAKA;MADsC,CAApD,EAGGa,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QAErB;;QAEA;;;;;;;;QAWA,IAAGA,KAAK,CAACf,IAAN,CAAWA,IAAX,KAAoB,OAAvB,EAAgC;UAC9BgB,KAAK,CAAC,OAAD,CAAL;QAEF,CAHA,MAGO;UACLA,KAAK,CAAC,OAAD,CAAL;QACF;MAED,CAzBH,EAyBKC,KAzBL,CAyBW,UAAUC,KAAV,EAAiB;QACxBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CA3BH;IA4BD,CAhCM;;IAiCP;IACAC,MAAK,GAAK;MACRR,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAhB,KAAK,CAACiB,IAAN,CAAW,4BAAX,EAAyC;QACvCZ,KAAK,EAAC,EADiC;QAEvCC,KAAK,EAAC,EAFiC;QAGvCC,UAAU,EAAC,EAH4B;QAIvCC,OAAO,EAAC,EAJ+B;QAKvCC,OAAO,EAAC,EAL+B;QAMvCC,QAAQ,EAAC,EAN8B;QAOvCC,QAAQ,EAAC,EAP8B;QAQvCC,QAAQ,EAAC;MAR8B,CAAzC,EAUGM,IAVH,CAUQ,YAAY,CAChB;QACA;QACA;MACD,CAdH,EAcKG,KAdL,CAcW,UAAUC,KAAV,EAAiB;QACxBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CAhBH;IAiBD,CArDM;;IAsDP;;IACA;IACAE,OAAO,GAAG;MACR;MACA,IAAIC,KAAI,GAAIpB,KAAK,CAACqB,KAAlB,CAFQ,CAIR;;MACA,IAAIC,MAAK,GAAIrB,KAAK,CAACoB,KAAnB,CALQ,CAOR;;MACA,IAAIE,MAAK,GAAI,sCAAsCC,IAAtC,CAA2CvB,KAA3C,CAAb,CARQ,CAUR;;MACA,IAAIwB,MAAK,GAAI,6CAA6CD,IAA7C,CAAkDvB,KAAlD,CAAb,CAXQ,CAaR;;MACA,IAAIyB,MAAK,GAAI,0CAA0CF,IAA1C,CAA+CvB,KAA/C,CAAb;;MAEA,IAAG,EAAEsB,MAAM,IAAEE,MAAR,IAAgBC,MAAlB,CAAH,EAA6B;QAC3BX,KAAK,CAAC,sCAAD,CAAL;QACA,OAAO,KAAP;MAAc;;MAChB,IAAG,WAAWS,IAAX,CAAgBF,MAAhB,CAAH,EAA2B;QACzBP,KAAK,CAAC,gDAAD,CAAL;QACA,OAAO,KAAP;MAAc;;MAAE,IAAGO,MAAM,CAACK,MAAP,CAAcP,KAAd,IAAqB,CAAC,CAAzB,EAA4B;QAC1CL,KAAK,CAAC,0CAAD,CAAL;QACA,OAAO,KAAP;MACJ;;MACA,OAAO,IAAP;IACF;;EAlFO,CAbI,CAgGX;;AAhGW,CAAf,C,CAkGE","names":["axios","defaults","headers","common","data","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","methods","checkId","console","log","post","then","idchk","alert","catch","error","sendDB","checkPw","mbrId","value","mbrPwd","check1","test","check2","check3","search"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\"><p id=\"userid_msg\"></p></label>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\"></label><br>\n      <button>비밀번호 체크</button>\n      </form>\n      \n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n    };\n  },\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n\n          /*test*/\n\n          /*\n          console.log('1')\n          console.log(idchk)\n\n          console.log('2')\n          console.log(idchk.data)\n\n          console.log('3')\n          console.log(idchk.data.data)\n          */\n\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n\n          } else {\n            alert(\"사용 불가\");\n          }\n\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* DB에 정보 내보내기  */\n    sendDB () {\n      console.log('DB test')\n      axios.post('http://192.168.0.107:9292/', {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n      })\n        .then(function () {\n          // console.log(res.data)\n          // console.log(res.data.mem.memID)\n          // console.log(res.data.mem.memRole.roleCode)\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* ??? */\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value;\n\n      // pw 입력\t\n      var mbrPwd = memPW.value;\n\n      //영문,숫자\t\n      var check1 = /^(?=.*[a-zA-Z])(?=.*[0-9]).{10,12}$/.test(memPW);   \n\n      //영문,특수문자\t\n      var check2 = /^(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{10,12}$/.test(memPW);  \n\n      //특수문자, 숫자\t\n      var check3 = /^(?=.*[^a-zA-Z0-9])(?=.*[0-9]).{10,12}$/.test(memPW);  \n      \n      if(!(check1||check2||check3)){\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\t}\t\n      if(/(\\w)\\1\\1/.test(mbrPwd)){\t\t\n        alert('같은 문자를 3번 이상 사용하실 수 없습니다.\\n패스워드 설정안내를 확인해 주세요.');\t\t\n        return false;\t}\tif(mbrPwd.search(mbrId)>-1) {\t\t\n          alert(\"비밀번호에 아이디가 포함되었습니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n          return false;\t\n      }\n      return true;\n    }\n  } // methods\n\n} // export default\n\n</script>\n"]},"metadata":{},"sourceType":"module"}