{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h1\", null, \"Sign Up 페이지입니다.\")], -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  for: \"memID\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"아이디 : \");\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", {\n  id: \"userid_msg\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  key: 0\n};\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"button\", null, \"아이디 사용 가능 체크\", -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"p\", null, \"8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_9 = {\n  for: \"memPW\"\n};\n\nconst _hoisted_10 = /*#__PURE__*/_createTextVNode(\"비밀번호 : \");\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_12 = {\n  for: \"memPWCheck\"\n};\n\nconst _hoisted_13 = /*#__PURE__*/_createTextVNode(\"비밀번호 확인 : \");\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_15 = {\n  key: 0\n};\nconst _hoisted_16 = {\n  for: \"memName\"\n};\n\nconst _hoisted_17 = /*#__PURE__*/_createTextVNode(\"이름 : \");\n\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_19 = {\n  for: \"memAddr\"\n};\n\nconst _hoisted_20 = /*#__PURE__*/_createTextVNode(\"주소 : \");\n\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_22 = {\n  for: \"memPhone\"\n};\n\nconst _hoisted_23 = /*#__PURE__*/_createTextVNode(\"전화번호 : \");\n\nconst _hoisted_24 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_25 = {\n  for: \"memEmail\"\n};\n\nconst _hoisted_26 = /*#__PURE__*/_createTextVNode(\"이메일 \");\n\nconst _hoisted_27 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_28 = {\n  for: \"memBirth\"\n};\n\nconst _hoisted_29 = /*#__PURE__*/_createTextVNode(\"생년월일 : \");\n\nconst _hoisted_30 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_31 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"reset\",\n  value: \"초기화\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_32 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"submit\",\n  id: \"login_submit\",\n  value: \"가입\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"/SignUp\",\n    method: \"get\",\n    class: \"usersignup\",\n    onSubmit: _cache[13] || (_cache[13] = _withModifiers((...args) => $options.signUpProc && $options.signUpProc(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"form\", {\n    action: \"/SignTest\",\n    method: \"get\",\n    class: \"userjoin\",\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.checkId && $options.checkId(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memID\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.signup.memID = $event),\n    mexlength: \"20\",\n    onBlur: _cache[1] || (_cache[1] = (...args) => $options.idValid && $options.idValid(...args)),\n    ref: \"memIDck\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.signup.memID]]), _hoisted_5]), _createCommentVNode(\" <label for=\\\"memIDCheck\\\">아이디 확인 : <input type=\\\"text\\\" id=\\\"memIDCheck\\\" v-model=\\\"signup.memIDCheck\\\" mexlength=\\\"20\\\"  @blur=\\\"idCheckValid\\\"><p id=\\\"userid_msg\\\"></p></label> \"), !$data.idValidFlag ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"유효하지 않은 아이디입니다.\")) : _createCommentVNode(\"v-if\", true), _hoisted_7], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"form\", {\n    action: \"/PwTest\",\n    class: \"userpwcheck\",\n    onSubmit: _cache[7] || (_cache[7] = _withModifiers((...args) => $options.checkPw && $options.checkPw(...args), [\"prevent\"]))\n  }, [_hoisted_8, _createElementVNode(\"label\", _hoisted_9, [_hoisted_10, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPW\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.signup.memPW = $event),\n    onBlur: _cache[4] || (_cache[4] = (...args) => $options.passwordValid && $options.passwordValid(...args)),\n    ref: \"memPWck\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.signup.memPW]])]), _hoisted_11, _createElementVNode(\"label\", _hoisted_12, [_hoisted_13, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPWCheck\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.signup.memPWCheck = $event),\n    maxlength: \"16\",\n    onBlur: _cache[6] || (_cache[6] = (...args) => $options.passwordCheckValid && $options.passwordCheckValid(...args)),\n    ref: \"signup.memPW\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.signup.memPWCheck]])]), _hoisted_14, !$data.passwordValidFlag ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, \"유효하지 않은 비밀번호 입니다.\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <button>비밀번호 체크</button> \")], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"label\", _hoisted_16, [_hoisted_17, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memName\",\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.signup.memName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.signup.memName]])]), _hoisted_18, _createElementVNode(\"label\", _hoisted_19, [_hoisted_20, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memAddr\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.signup.memAddr = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.signup.memAddr]])]), _hoisted_21, _createElementVNode(\"label\", _hoisted_22, [_hoisted_23, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memPhone\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.signup.memPhone = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.signup.memPhone]])]), _hoisted_24, _createElementVNode(\"label\", _hoisted_25, [_hoisted_26, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memEmail\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.memEmail = $event),\n    ref: \"memEmailck\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memEmail]])]), _hoisted_27, _createElementVNode(\"label\", _hoisted_28, [_hoisted_29, _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"memBirth\",\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $data.memBirth = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memBirth]])]), _hoisted_30, _hoisted_31, _hoisted_32], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;gCACTC,oBAEO,KAFP,EAEO,IAFP,EAEO,cADLA,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,iBAAJ,CACK,CAFP;;AAAA;;;EAMeC,GAAG,EAAC;;;iDAAQ;;gCAAyGD,oBAAuB,GAAvB,EAAuB;EAApBE,EAAE,EAAC;AAAiB,CAAvB,EAAkB,IAAlB,EAAkB;AAAA;AAAlB;;;;;;gCAG5HF,oBAA6B,QAA7B,EAA6B,IAA7B,EAAQ,cAAR,EAAoB;AAAA;AAApB;;gCAIJA,oBAA+C,GAA/C,EAA+C,IAA/C,EAAG,0CAAH,EAA2C;AAAA;AAA3C;;;EACOC,GAAG,EAAC;;;kDAAQ;;iCAA4GD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACxHC,GAAG,EAAC;;;kDAAa;;iCAAkJD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;;;;EAKnKC,GAAG,EAAC;;;kDAAU;;iCAAsED,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACpFC,GAAG,EAAC;;;kDAAU;;iCAAsED,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACpFC,GAAG,EAAC;;;kDAAW;;iCAA0ED,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACzFC,GAAG,EAAC;;;kDAAW;;iCAAkFD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACjGC,GAAG,EAAC;;;kDAAW;;iCAAqED,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;iCAC3FA,oBAAgC,OAAhC,EAAgC;EAAzBG,IAAI,EAAC,OAAoB;EAAZC,KAAK,EAAC;AAAM,CAAhC;;AAAA;;iCACAJ,oBAAkD,OAAlD,EAAkD;EAA3CG,IAAI,EAAC,QAAsC;EAA7BD,EAAE,EAAC,cAA0B;EAAXE,KAAK,EAAC;AAAK,CAAlD;;AAAA;;;uBA3BNC,oBA6BM,KA7BN,cA6BM,CA5BJC,UA4BI,EAxBFN,oBAuBO,MAvBP,EAuBO;IAvBDO,MAAM,EAAC,SAuBN;IAvBgBC,MAAM,EAAC,KAuBvB;IAvB6BT,KAAK,EAAC,YAuBnC;IAvBiDU,QAAM,0DAAUC,mDAAV,EAAoB,WAApB;EAuBvD,CAvBP,GACEV,oBAKO,MALP,EAKO;IALDO,MAAM,EAAC,WAKN;IALmBC,MAAM,EAAC,KAK1B;IALgCT,KAAK,EAAC,UAKtC;IALkDU,QAAM,wDAAUC,6CAAV,EAAiB,WAAjB;EAKxD,CALP,GACIV,oBAA2J,OAA3J,cAA2J,6BAAlIA,oBAAmG,OAAnG,EAAmG;IAA5FG,IAAI,EAAC,MAAuF;IAAhFD,EAAE,EAAC,OAA6E;+DAA5DS,aAAOC,QAAKC,OAAgD;IAA9CC,SAAS,EAAC,IAAoC;IAA7BC,MAAI,yCAAEL,6CAAF,CAAyB;IAAdM,GAAG,EAAC;EAAU,CAAnG;;EAAA,kBAAuCL,aAAOC,QAAoF,EAA/BK,UAA+B,CAA3J,GACAC,8MACYP,mCAAZN,oBAA8C,KAA9C,EAA8Cc,UAA9C,EAAyB,iBAAzB,wCACAC,WAJJ;;EAAA,GAOFpB,oBAMS,MANT,EAMS;IANHO,MAAM,EAAC,SAMJ;IANcR,KAAK,EAAC,aAMpB;IANmCU,QAAM,wDAAUC,6CAAV,EAAiB,WAAjB;EAMzC,CANT,GACEW,YACArB,oBAA+H,OAA/H,cAA+H,8BAArGA,oBAA6F,OAA7F,EAA6F;IAAtFG,IAAI,EAAC,UAAiF;IAAtED,EAAE,EAAC,OAAmE;+DAAlDS,aAAOW,QAAKT,OAAsC;IAAnCE,MAAI,yCAAEL,yDAAF,CAA+B;IAAdM,GAAG,EAAC;EAAU,CAA7F;;EAAA,kBAA2CL,aAAOW,QAAmD,CAA/H,GAA+HC,aAC/HvB,oBAA0K,OAA1K,eAA0K,8BAAxIA,oBAAgI,OAAhI,EAAgI;IAAzHG,IAAI,EAAC,UAAoH;IAAzGD,EAAE,EAAC,YAAsG;+DAAhFS,aAAOa,aAAUX,OAA+D;IAA7DY,SAAS,EAAC,IAAmD;IAA7CV,MAAI,yCAAEL,mEAAF,CAAyC;IAAnBM,GAAG,EAAC;EAAe,CAAhI;;EAAA,kBAAgDL,aAAOa,aAAiF,CAA1K,GAA0KE,cAC9Jf,yCAAZN,oBAAsD,KAAtD,EAAsDsB,WAAtD,EAA+B,mBAA/B,wCACAT,kDALF;;EAAA,GAQElB,oBAA2F,OAA3F,eAA2F,8BAAjEA,oBAAyD,OAAzD,EAAyD;IAAlDG,IAAI,EAAC,MAA6C;IAAtCD,EAAE,EAAC,SAAmC;+DAAhBS,aAAOiB,UAAOf;EAAE,CAAzD;;EAAA,kBAAyCF,aAAOiB,UAAiB,CAA3F,GAA2FC,aAC3F7B,oBAA2F,OAA3F,eAA2F,8BAAjEA,oBAAyD,OAAzD,EAAyD;IAAlDG,IAAI,EAAC,MAA6C;IAAtCD,EAAE,EAAC,SAAmC;+DAAhBS,aAAOmB,UAAOjB;EAAE,CAAzD;;EAAA,kBAAyCF,aAAOmB,UAAiB,CAA3F,GAA2FC,aAC3F/B,oBAAgG,OAAhG,eAAgG,8BAAnEA,oBAA2D,OAA3D,EAA2D;IAApDG,IAAI,EAAC,MAA+C;IAAxCD,EAAE,EAAC,UAAqC;iEAAjBS,aAAOqB,WAAQnB;EAAE,CAA3D;;EAAA,kBAA0CF,aAAOqB,WAAkB,CAAhG,GAAgGC,aAChGjC,oBAAwG,OAAxG,eAAwG,8BAA7EA,oBAAqE,OAArE,EAAqE;IAA9DG,IAAI,EAAC,MAAyD;IAAlDD,EAAE,EAAC,UAA+C;iEAA3BS,iBAAQE,OAAmB;IAAjBG,GAAG,EAAC;EAAa,CAArE;;EAAA,kBAA0CL,iBAAmC,CAAxG,GAAwGuB,aACxGlC,oBAA2F,OAA3F,eAA2F,8BAA9DA,oBAAsD,OAAtD,EAAsD;IAA/CG,IAAI,EAAC,MAA0C;IAAlCD,EAAE,EAAC,UAA+B;iEAAXS,iBAAQE;EAAG,CAAtD;;EAAA,kBAA2CF,iBAAmB,CAA3F,GAA2FwB,aAC3FC,aACAC,YAtBF;;EAAA,CAwBE,CA7BN","names":["class","_createElementVNode","for","id","type","value","_createElementBlock","_hoisted_2","action","method","onSubmit","$options","$data","memID","$event","mexlength","onBlur","ref","_hoisted_5","_createCommentVNode","_hoisted_6","_hoisted_7","_hoisted_8","memPW","_hoisted_11","memPWCheck","maxlength","_hoisted_14","_hoisted_15","memName","_hoisted_18","memAddr","_hoisted_21","memPhone","_hoisted_24","_hoisted_27","_hoisted_30","_hoisted_31","_hoisted_32"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n     </div>\n     \n      <form action=\"/SignUp\" method=\"get\" class=\"usersignup\" @submit.prevent=\"signUpProc\">\n        <form action=\"/SignTest\"  method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n            <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\"  @blur=\"idValid\" ref=\"memIDck\"><p id=\"userid_msg\"></p></label>\n            <!-- <label for=\"memIDCheck\">아이디 확인 : <input type=\"text\" id=\"memIDCheck\" v-model=\"signup.memIDCheck\" mexlength=\"20\"  @blur=\"idCheckValid\"><p id=\"userid_msg\"></p></label> -->\n            <div v-if=\"!idValidFlag\">유효하지 않은 아이디입니다.</div>\n            <button>아이디 사용 가능 체크</button>\n        </form>\n\n      <form action=\"/PwTest\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\" ref=\"memPWck\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\" ref=\"signup.memPW\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        <!-- <button>비밀번호 체크</button> -->\n        </form>\n        \n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\n        <label for=\"memEmail\">이메일  <input type=\"text\" id=\"memEmail\" v-model=\"memEmail\" ref=\"memEmailck\"></label><br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\"  id=\"memBirth\" v-model=\"memBirth\" ></label><br>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  \n  data() {\n    return {\n        memEmail:'test@test.com',\n        memBirth:'1990-01-01',\n        \n        signup: {\n          memID:null,\n          //memIDCheck:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:null,\n          memAddr:null,\n          memPhone:'010-1234-5678',\n          },\n          idValidFlag: true,\n          passwordValidFlag: true,\n          \n          idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n    idValid () {\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \n        this.idValidFlag = true\n      } else {\n        this.idValidFlag = false\n      }\n    },\n    idCheckValid() {\n        if (this.signup.memID === this.idCheck) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n\n      /* 정규식 검사 */\n      if(!(this.idValidFlag)) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else{\n         /* DB와 비교하기 */\n      axios.post('http://192.168.0.88:9292/mem/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n      }\n\n    },\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n    \n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {    \n\n      console.log('ID test')\n\n      if(!this.signup.memID) {\n        alert(\"아이디를 입력해주세요!\");\n        this.$refs.memIDck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else if(!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        this.$refs.memPWck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else if(!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        this.$refs.memEmailck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else {\n        axios.post('http://192.168.0.88:9292/mem/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth  \n        }) .then(function (datatest) {\n            console.log(datatest.data);\n            alert(\"회원가입 완료\");\n          }).catch(function (error) {\n            console.log(error)\n          })\n      }\n    } // signUpProc\n  } // methods\n\n} // export default\n</script>\n\n"]},"metadata":{},"sourceType":"module"}