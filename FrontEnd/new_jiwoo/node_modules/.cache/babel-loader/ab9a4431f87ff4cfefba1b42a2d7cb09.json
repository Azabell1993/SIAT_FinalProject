{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memID: '',\n      memPW: '',\n      memPWCheck: '',\n      memName: '',\n      memAddr: '',\n      memPhone: '',\n      memEmail: '',\n      memBirth: ''\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      axios.post('http://192.168.0.81:8081/idCheckProc', {\n        memID: this.memID\n      }).then(function (idchk) {\n        console.log(idchk.data);\n        console.log(idchk.data.mem.memID);\n        console.log(idchk.data.mem.memRole.roleCode); //this.$emit(res.data.mem.memID)\n      }).catch(function (error) {\n        console.log(error);\n        alert('중복된 아이디입니다.');\n      });\n    },\n\n    /* DB에 정보 내보내기  */\n    sendDB() {\n      console.log('DB test');\n      axios.post('http://192.168.0.81:8081/', {\n        memID: '',\n        memPW: '',\n        memPWCheck: '',\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      }).then(function () {// console.log(res.data)\n        // console.log(res.data.mem.memID)\n        // console.log(res.data.mem.memRole.roleCode)\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n  } // methods\n\n}; // export default\n\nfunction checkPassword(memPW) {\n  if (!/^[a-zA-Z0-9]{10,15}$/.test(memPW)) {\n    alert('숫자와 영문자 조합으로 10~15자리를 사용해야 합니다.');\n    return false;\n  }\n\n  var checkNumber = memPW.search(/[0-9]/g);\n  var checkEnglish = memPW.search(/[a-z]/ig);\n\n  if (checkNumber < 0 || checkEnglish < 0) {\n    showError(memPW, \"숫자와 영문자를 혼용하여야 합니다.\");\n    return false;\n  }\n\n  if (/(\\w)\\1\\1\\1/.test(memPW)) {\n    showError(memPW, '444같은 문자를 4번이상 사용하실 수 없습니다.');\n    return false;\n  }\n\n  if (memPW.search(memID) > -1) {\n    shlwError(memPW, \"비밀번호에 아이디가 포함되었습니다.\");\n    return false;\n  }\n\n  return true;\n}\n\nconst notice = document.querySelector(\".notice\");\n\nfunction allRequired() {\n  notice.classList.add(\"show\");\n  setTimeout(() => {\n    notice.classList.remove(\"show\");\n  }, 2000);\n}","map":{"version":3,"mappings":"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","names":["axios","defaults","headers","common","data","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","methods","checkId","console","log","post","then","idchk","mem","memRole","roleCode","catch","error","alert","sendDB","checkPassword","test","checkNumber","search","checkEnglish","showError","shlwError","notice","document","querySelector","allRequired","classList","add","setTimeout","remove"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"sendPost\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\"><p id=\"userid_msg\"></p></label>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\"></label><br>\n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n    };\n  },\n\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.81:8081/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n          console.log(idchk.data)\n          console.log(idchk.data.mem.memID)\n          console.log(idchk.data.mem.memRole.roleCode)\n          //this.$emit(res.data.mem.memID)\n        }).catch(function (error) {\n          console.log(error)\n          alert('중복된 아이디입니다.')\n        })\n    },\n    /* DB에 정보 내보내기  */\n    sendDB () {\n      console.log('DB test')\n      axios.post('http://192.168.0.81:8081/', {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n      })\n        .then(function () {\n          // console.log(res.data)\n          // console.log(res.data.mem.memID)\n          // console.log(res.data.mem.memRole.roleCode)\n        }).catch(function (error) {\n          console.log(error)\n        })\n    }\n\n  } // methods\n\n} // export default\n\nfunction checkPassword(memPW) {\n  if(!/^[a-zA-Z0-9]{10,15}$/.test(memPW)) {\n    alert('숫자와 영문자 조합으로 10~15자리를 사용해야 합니다.');\n    return false;\n  }\n\n  var checkNumber = memPW.search(/[0-9]/g);\n  var checkEnglish = memPW.search(/[a-z]/ig);\n\n  if(checkNumber < 0 || checkEnglish < 0) {\n      showError(memPW, \"숫자와 영문자를 혼용하여야 합니다.\");\n      return false;\n  }\n\n  if(/(\\w)\\1\\1\\1/.test(memPW)) {\n      showError(memPW, '444같은 문자를 4번이상 사용하실 수 없습니다.');\n      return false;\n  }\n\n  if(memPW.search(memID) > -1) {\n      shlwError(memPW, \"비밀번호에 아이디가 포함되었습니다.\");\n      return false;\n  } \n  return true;\n}\nconst notice = document.querySelector(\".notice\");\n\nfunction allRequired() {\n  notice.classList.add(\"show\");\n  setTimeout(() => {\n    notice.classList.remove(\"show\");\n  }, 2000);\n}\n\n</script>\n"]},"metadata":{},"sourceType":"module"}