{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      signup: {\n        memID: null,\n        memIDCheck: null,\n        memPW: null,\n        memPWCheck: null,\n        memName: null,\n        memAddr: null,\n        memPhone: null,\n        memEmail: null,\n        memBirth: null\n      },\n      idValidFlag: true,\n      passwordValidFlag: true,\n      idCheck: '',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    idValid() {\n      if (/^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {\n        this.idValidFlag = true;\n      } else {\n        this.idValidFlag = false;\n      }\n    },\n\n    idCheckValid() {\n      if (this.signup.memID === this.idCheck) {\n        this.idCheck = true;\n      } else {\n        this.idCheck = false;\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      /* 정규식 검사 */\n\n      if (!this.idValidFlag) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else {\n        /* DB와 비교하기 */\n        axios.post('http://192.168.0.81:9292/idCheckProc', {\n          memID: this.signup.memID\n        }).then(function (idchk) {\n          if (idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* email check */\n    validEmail: function (memEmail) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(memEmail);\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc: function (e) {\n      this.errors = [];\n\n      if (!this.memName) {\n        this.errors.push(\"이름이 필요합니다..\");\n      } else if (!this.memEmail) {\n        this.errors.push('이메일이 필요합니다.');\n      } else if (!this.validEmail(this.email)) {\n        this.errors.push('유효한 이메일이 필요합니다.');\n      } else if (!this.errors.length) {\n        return true;\n      } else if (!this.errors.length) {\n        e.preventDefault();\n      } else {\n        console.log('ID test');\n        axios.post('http://192.168.0.81:9292/signUpProc', {\n          memID: this.signup.memID,\n          memIDCheck: this.memIDCheck,\n          memPW: this.memPW,\n          memPWCheck: this.memPWCheck,\n          memName: this.memName,\n          memAddr: this.memAddr,\n          memPhone: this.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth\n        }).then(function () {\n          alert(\"회원가입 완료\");\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    } // signUpProc\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"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","names":["axios","defaults","headers","common","data","signup","memID","memIDCheck","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","idValidFlag","passwordValidFlag","idCheck","passwordCheck","methods","idValid","test","idCheckValid","passwordValid","passwordCheckValid","passwordCheckFlag","checkId","console","log","alert","post","then","idchk","catch","error","checkPw","validEmail","re","signUpProc","e","errors","push","email","length","preventDefault"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_project/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/signUpProcTest\" method=\"get\" class=\"usersignup\" @submit.prevent=\"signUpProc\" novaliadate=\"true\">\n        <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n            <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\"  @blur=\"idValid\"><p id=\"userid_msg\"></p></label>\n            <label for=\"memIDCheck\">아이디 확인 : <input type=\"text\" id=\"memIDCheck\" v-model=\"signup.memIDCheck\" mexlength=\"20\"  @blur=\"idCheckValid\"><p id=\"userid_msg\"></p></label>\n            <div v-if=\"!idValidFlag\">유효하지 않은 아이디입니다.</div>\n            <button>아이디 사용 가능 체크</button>\n        </form>\n\n        <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        </form>\n        \n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\" mexlength=\"20\" ></label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\" mexlength=\"50\" ></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\" mexlength=\"11\" ></label><br>\n        <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"signup.memEmail\" mexlength=\"40\" ></label>\n        <br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"signup.memBirth\" mexlength=\"20\" ></label><br>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        signup: {\n          memID:null,\n          memIDCheck:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:null,\n          memAddr:null,\n          memPhone:null,\n          memEmail:null,\n          memBirth:null\n          },\n          idValidFlag: true,\n          passwordValidFlag: true,\n          \n          idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n    idValid () {\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \n        this.idValidFlag = true\n      } else {\n        this.idValidFlag = false\n      }\n    },\n    idCheckValid() {\n        if (this.signup.memID === this.idCheck) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n\n      /* 정규식 검사 */\n      if(!(this.idValidFlag)) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else{\n         /* DB와 비교하기 */\n        axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n      }\n    },\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* email check */\n    validEmail: function (memEmail) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(memEmail);  \n      \n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc: function (e) {\n      this.errors = [];\n\n      if(!this.memName) {\n        this.errors.push(\"이름이 필요합니다..\");\n      }\n\n      else if(!this.memEmail) {\n        this.errors.push('이메일이 필요합니다.');\n      } else if (!this.validEmail(this.email)) {\n         this.errors.push('유효한 이메일이 필요합니다.');\n      }\n\n      else if (!this.errors.length) {\n        return true;\n      } else if (!this.errors.length) {\n        e.preventDefault();\n      } else {\n      console.log('ID test')\n      axios.post('http://192.168.0.81:9292/signUpProc', {\n        memID: this.signup.memID,\n        memIDCheck: this.memIDCheck,\n        memPW: this.memPW,\n        memPWCheck: this.memPWCheck,\n        memName: this.memName,\n        memAddr: this.memAddr,\n        memPhone: this.memPhone,\n        memEmail: this.memEmail,\n        memBirth: this.memBirth\n      }) .then(function () {\n            alert(\"회원가입 완료\");\n        }).catch(function (error) {\n          console.log(error)\n        })\n      }\n\n    } // signUpProc\n\n  } // methods\n} // export default\n</script>\n"]},"metadata":{},"sourceType":"module"}