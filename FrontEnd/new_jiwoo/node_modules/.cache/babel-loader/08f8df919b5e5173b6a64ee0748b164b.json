{"ast":null,"code":"/*!\n  * Bootstrap template-factory.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./sanitizer'), require('./index'), require('../dom/selector-engine'), require('./config')) : typeof define === 'function' && define.amd ? define(['./sanitizer', './index', '../dom/selector-engine', './config'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.TemplateFactory = factory(global.Sanitizer, global.Index, global.SelectorEngine, global.Config));\n})(this, function (sanitizer, index, SelectorEngine, Config) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n\n  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): util/template-factory.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n\n  const NAME = 'TemplateFactory';\n  const Default = {\n    allowList: sanitizer.DefaultAllowlist,\n    content: {},\n    // { selector : text ,  selector2 : text2 , }\n    extraClass: '',\n    html: false,\n    sanitize: true,\n    sanitizeFn: null,\n    template: '<div></div>'\n  };\n  const DefaultType = {\n    allowList: 'object',\n    content: 'object',\n    extraClass: '(string|function)',\n    html: 'boolean',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    template: 'string'\n  };\n  const DefaultContentType = {\n    entry: '(string|element|function|null)',\n    selector: '(string|element)'\n  };\n  /**\n   * Class definition\n   */\n\n  class TemplateFactory extends Config__default.default {\n    constructor(config) {\n      super();\n      this._config = this._getConfig(config);\n    } // Getters\n\n\n    static get Default() {\n      return Default;\n    }\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    getContent() {\n      return Object.values(this._config.content).map(config => this._resolvePossibleFunction(config)).filter(Boolean);\n    }\n\n    hasContent() {\n      return this.getContent().length > 0;\n    }\n\n    changeContent(content) {\n      this._checkContent(content);\n\n      this._config.content = { ...this._config.content,\n        ...content\n      };\n      return this;\n    }\n\n    toHtml() {\n      const templateWrapper = document.createElement('div');\n      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n\n      for (const [selector, text] of Object.entries(this._config.content)) {\n        this._setContent(templateWrapper, text, selector);\n      }\n\n      const template = templateWrapper.children[0];\n\n      const extraClass = this._resolvePossibleFunction(this._config.extraClass);\n\n      if (extraClass) {\n        template.classList.add(...extraClass.split(' '));\n      }\n\n      return template;\n    } // Private\n\n\n    _typeCheckConfig(config) {\n      super._typeCheckConfig(config);\n\n      this._checkContent(config.content);\n    }\n\n    _checkContent(arg) {\n      for (const [selector, content] of Object.entries(arg)) {\n        super._typeCheckConfig({\n          selector,\n          entry: content\n        }, DefaultContentType);\n      }\n    }\n\n    _setContent(template, content, selector) {\n      const templateElement = SelectorEngine__default.default.findOne(selector, template);\n\n      if (!templateElement) {\n        return;\n      }\n\n      content = this._resolvePossibleFunction(content);\n\n      if (!content) {\n        templateElement.remove();\n        return;\n      }\n\n      if (index.isElement(content)) {\n        this._putElementInTemplate(index.getElement(content), templateElement);\n\n        return;\n      }\n\n      if (this._config.html) {\n        templateElement.innerHTML = this._maybeSanitize(content);\n        return;\n      }\n\n      templateElement.textContent = content;\n    }\n\n    _maybeSanitize(arg) {\n      return this._config.sanitize ? sanitizer.sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n    }\n\n    _resolvePossibleFunction(arg) {\n      return typeof arg === 'function' ? arg(this) : arg;\n    }\n\n    _putElementInTemplate(element, templateElement) {\n      if (this._config.html) {\n        templateElement.innerHTML = '';\n        templateElement.append(element);\n        return;\n      }\n\n      templateElement.textContent = element.textContent;\n    }\n\n  }\n\n  return TemplateFactory;\n});","map":{"version":3,"mappings":"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","names":["NAME","Default","allowList","DefaultAllowlist","content","extraClass","html","sanitize","sanitizeFn","template","DefaultType","DefaultContentType","entry","selector","TemplateFactory","Config","constructor","config","_config","_getConfig","getContent","Object","values","map","_resolvePossibleFunction","filter","Boolean","hasContent","length","changeContent","_checkContent","toHtml","templateWrapper","document","createElement","innerHTML","_maybeSanitize","text","entries","_setContent","children","classList","add","split","_typeCheckConfig","arg","templateElement","SelectorEngine","findOne","remove","isElement","_putElementInTemplate","getElement","textContent","sanitizeHtml","element","append"],"sources":["../../src/util/template-factory.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer'\nimport { getElement, isElement } from '../util/index'\nimport SelectorEngine from '../dom/selector-engine'\nimport Config from './config'\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory'\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {}, // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n}\n\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n}\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content)\n      .map(config => this._resolvePossibleFunction(config))\n      .filter(Boolean)\n  }\n\n  hasContent() {\n    return this.getContent().length > 0\n  }\n\n  changeContent(content) {\n    this._checkContent(content)\n    this._config.content = { ...this._config.content, ...content }\n    return this\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div')\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector)\n    }\n\n    const template = templateWrapper.children[0]\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '))\n    }\n\n    return template\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config)\n    this._checkContent(config.content)\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template)\n\n    if (!templateElement) {\n      return\n    }\n\n    content = this._resolvePossibleFunction(content)\n\n    if (!content) {\n      templateElement.remove()\n      return\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement)\n      return\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content)\n      return\n    }\n\n    templateElement.textContent = content\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\n  }\n\n  _resolvePossibleFunction(arg) {\n    return typeof arg === 'function' ? arg(this) : arg\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = ''\n      templateElement.append(element)\n      return\n    }\n\n    templateElement.textContent = element.textContent\n  }\n}\n\nexport default TemplateFactory\n"]},"metadata":{},"sourceType":"script"}