{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h1\", null, \"Sign Up 페이지입니다.\")], -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  for: \"memID\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"아이디 : \");\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", {\n  id: \"userid_msg\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  for: \"memIDCheck\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_createTextVNode(\"아이디 확인 : \");\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"p\", {\n  id: \"userid_msg\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_9 = {\n  key: 0\n};\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"button\", null, \"아이디 사용 가능 체크\", -1\n/* HOISTED */\n);\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"p\", null, \"8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_12 = {\n  for: \"memPW\"\n};\n\nconst _hoisted_13 = /*#__PURE__*/_createTextVNode(\"비밀번호 : \");\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_15 = {\n  for: \"memPWCheck\"\n};\n\nconst _hoisted_16 = /*#__PURE__*/_createTextVNode(\"비밀번호 확인 : \");\n\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_18 = {\n  key: 0\n};\nconst _hoisted_19 = {\n  for: \"memName\"\n};\n\nconst _hoisted_20 = /*#__PURE__*/_createTextVNode(\"이름 : \");\n\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_22 = {\n  for: \"memAddr\"\n};\n\nconst _hoisted_23 = /*#__PURE__*/_createTextVNode(\"주소 : \");\n\nconst _hoisted_24 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_25 = {\n  for: \"memPhone\"\n};\n\nconst _hoisted_26 = /*#__PURE__*/_createTextVNode(\"전화번호 : \");\n\nconst _hoisted_27 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_28 = {\n  for: \"memEmail\"\n};\n\nconst _hoisted_29 = /*#__PURE__*/_createTextVNode(\"이메일 : \");\n\nconst _hoisted_30 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_31 = {\n  for: \"memBirth\"\n};\n\nconst _hoisted_32 = /*#__PURE__*/_createTextVNode(\"생년월일 : \");\n\nconst _hoisted_33 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_34 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"reset\",\n  value: \"초기화\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_35 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"submit\",\n  id: \"login_submit\",\n  value: \"가입\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"/signUpProcTest\",\n    method: \"get\",\n    class: \"usersignup\",\n    onSubmit: _cache[15] || (_cache[15] = _withModifiers((...args) => _ctx.signUpProc && _ctx.signUpProc(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"form\", {\n    action: \"/SignTest\",\n    method: \"get\",\n    class: \"userjoin\",\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => _ctx.checkId && _ctx.checkId(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memID\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.signup.memID = $event),\n    mexlength: \"20\",\n    onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.idValid && _ctx.idValid(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memID]]), _hoisted_5]), _createElementVNode(\"label\", _hoisted_6, [_hoisted_7, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memIDCheck\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.signup.memIDCheck = $event),\n    mexlength: \"20\",\n    onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.idCheckValid && _ctx.idCheckValid(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memIDCheck]]), _hoisted_8]), !_ctx.idValidFlag ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \"유효하지 않은 아이디입니다.\")) : _createCommentVNode(\"v-if\", true), _hoisted_10], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"form\", {\n    action: \"/PwTest\",\n    method: \"get\",\n    class: \"userpwcheck\",\n    onSubmit: _cache[9] || (_cache[9] = _withModifiers((...args) => _ctx.checkPw && _ctx.checkPw(...args), [\"prevent\"]))\n  }, [_hoisted_11, _createElementVNode(\"label\", _hoisted_12, [_hoisted_13, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPW\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.signup.memPW = $event),\n    onBlur: _cache[6] || (_cache[6] = (...args) => _ctx.passwordValid && _ctx.passwordValid(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memPW]])]), _hoisted_14, _createElementVNode(\"label\", _hoisted_15, [_hoisted_16, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPWCheck\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.signup.memPWCheck = $event),\n    maxlength: \"16\",\n    onBlur: _cache[8] || (_cache[8] = (...args) => _ctx.passwordCheckValid && _ctx.passwordCheckValid(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memPWCheck]])]), _hoisted_17, !_ctx.passwordValidFlag ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, \"유효하지 않은 비밀번호 입니다.\")) : _createCommentVNode(\"v-if\", true)], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"label\", _hoisted_19, [_hoisted_20, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memName\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => _ctx.signup.memName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memName]])]), _hoisted_21, _createElementVNode(\"label\", _hoisted_22, [_hoisted_23, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memAddr\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => _ctx.signup.memAddr = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memAddr]])]), _hoisted_24, _createElementVNode(\"label\", _hoisted_25, [_hoisted_26, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memPhone\",\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => _ctx.signup.memPhone = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memPhone]])]), _hoisted_27, _createElementVNode(\"label\", _hoisted_28, [_hoisted_29, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"memEmail\",\n    \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => _ctx.signup.memEmail = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memEmail]])]), _hoisted_30, _createElementVNode(\"label\", _hoisted_31, [_hoisted_32, _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"memBirth\",\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => _ctx.signup.memBirth = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.signup.memBirth]])]), _hoisted_33, _hoisted_34, _hoisted_35], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","for","id","type","value","_createElementBlock","_hoisted_2","action","method","onSubmit","_ctx","memID","$event","mexlength","onBlur","_hoisted_5","memIDCheck","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","memPW","_hoisted_14","memPWCheck","maxlength","_hoisted_17","_hoisted_18","memName","_hoisted_21","memAddr","_hoisted_24","memPhone","_hoisted_27","memEmail","_hoisted_30","memBirth","_hoisted_33","_hoisted_34","_hoisted_35"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_project/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/signUpProcTest\" method=\"get\" class=\"usersignup\" @submit.prevent=\"signUpProc\">\n        <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n            <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\"  @blur=\"idValid\"><p id=\"userid_msg\"></p></label>\n            <label for=\"memIDCheck\">아이디 확인 : <input type=\"text\" id=\"memIDCheck\" v-model=\"signup.memIDCheck\" mexlength=\"20\"  @blur=\"idCheckValid\"><p id=\"userid_msg\"></p></label>\n            <div v-if=\"!idValidFlag\">유효하지 않은 아이디입니다.</div>\n            <button>아이디 사용 가능 체크</button>\n        </form>\n\n        <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        </form>\n        \n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\n        <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"signup.memEmail\"></label>\n        <br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"signup.memBirth\"></label><br>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        signup: {\n          memID:null,\n          memIDCheck:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:'',\n          memAddr:'',\n          memPhone:'',\n          memEmail:'',\n          memBirth:''\n          },\n          idValidFlag: true,\n          passwordValidFlag: true,\n          \n          idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n    idValid () {\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \n        this.idValidFlag = true\n      } else {\n        this.idValidFlag = false\n      }\n    },\n    idCheckValid() {\n        if (this.signup.memID === this.idCheck) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n\n      /* 정규식 검사 */\n      if(!(this.idValidFlag)) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else{\n         /* DB와 비교하기 */\n        axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n      }\n    },\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc () {\n      console.log('ID test')\n      axios.post('http://192.168.0.81:9292/signUpProc', {\n        memID: this.signup.memID,\n        memIDCheck: this.memIDCheck,\n        memPW: this.memPW,\n        memPWCheck: this.memPWCheck,\n        memName: this.memName,\n        memAddr: this.memAddr,\n        memPhone: this.memPhone,\n        memEmail: this.memEmail,\n        memBirth: this.memBirth\n      })\n\n  } // methods\n\n} // export default\n</script>\n"]},"metadata":{},"sourceType":"module"}