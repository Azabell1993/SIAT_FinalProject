{"ast":null,"code":"import axios from 'axios';\nimport store from '@/store/index';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    store.commit('updateloginUserPW', userPW);\n    console.log('memPW : ', response.data.data.memPW);\n    store.commit('updateloginUserName', userName);\n    console.log('memName : ', response.data.data.memName);\n    store.commit('updateloginUserAddr', userAddr);\n    console.log('memAddr : ', response.data.data.memAddr);\n    store.commit('updateloginUserPhone', userPhone);\n    console.log('memPhone : ', response.data.data.memPhone);\n    store.commit('updateloginUserBirth', userBirth);\n    console.log('memBirth : ', response.data.data.memBirth);\n    store.commit('updateloginUserRole', userRole);\n    console.log('memRole : ', response.data.data.memRole.roleCode);\n    return {\n      modifyup: {\n        memID: store.state.loginUser.memID,\n        memPW: null,\n        memPWCheck: null,\n        memName: store.state.loginUser.memName,\n        memAddr: store.state.loginUser.memAddr,\n        memPhone: store.state.loginUser.memPhone,\n        memEmail: store.state.loginUser.memEmail,\n        memBirth: store.state.loginUser.memBirth\n      },\n      // idValidFlag: true,\n      passwordValidFlag: true,\n      // idCheck:'',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.modifyup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.modifyup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      } else if (store.state.loginUser.memPW === this.modifyup.memPW) {\n        alert(\"이전 비밀번호와 같은 값은 사용할 수 없습니다.\");\n        return false;\n      } else {\n        alert(\"사용 가능한 비밀번호 입니다.\");\n        return true;\n      }\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    modifyupProc() {\n      // console.log('ID test')\n      if (!this.modifyup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if (!this.modifyup.memPWCheck) {\n        alert(\"비밀번호 체크를 해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.81:9292/mem/modifyupProc', {\n          memID: this.modifyup.memID,\n          memPW: this.modifyup.memPW,\n          memName: this.modifyup.memName,\n          memAddr: this.modifyup.memAddr,\n          memPhone: this.modifyup.memPhone,\n          memEmail: this.modifyup.memEmail,\n          memBirth: this.modifyup.memBirth\n        }).then(function\n          /* datatest */\n        () {// if(datatest.data.data === 'false') {\n          //   alert(\"기존에 없는 아이디를 생성하시오.\");\n          // } else if(datatest.data.data !== 'true'){\n          //   alert(\"회원가입 완료\");\n          // }\n          //console.log(datatest.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    } // modifyupProc\n\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"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","names":["axios","store","defaults","headers","common","data","commit","userPW","console","log","response","memPW","userName","memName","userAddr","memAddr","userPhone","memPhone","userBirth","memBirth","userRole","memRole","roleCode","modifyup","memID","state","loginUser","memPWCheck","memEmail","passwordValidFlag","passwordCheck","methods","passwordValid","test","passwordCheckValid","passwordCheckFlag","checkPw","alert","modifyupProc","post","then","catch","error"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/mypage/ModifyInfo.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h3>회원 정보 수정 페이지입니다.</h3>\n     </div>\n     \n      <form action=\"/modifyup\" method=\"get\" class=\"usermodifyup\" @submit.prevent=\"modifyupProc\">\n        <p>{{ modifyup.memID }}님 회원정보 페이지.</p><hr>\n      <form action=\"/PwTest\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : \n        <input type=\"password\" id=\"memPW\" v-model=\"modifyup.memPW\" @blur=\"passwordValid\" ref=\"memPWck\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"modifyup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\" ref=\"modifyup.memPW\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        <!-- <button>비밀번호 체크</button> -->\n        </form>\n\n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"modifyup.memName\" > </label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"modifyup.memAddr\"></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"modifyup.memPhone\"></label><br>\n        <label for=\"memEmail\">이메일  <input type=\"text\" id=\"memEmail\" v-model=\"modifyup.memEmail\" ref=\"memEmailck\"></label><br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\"  id=\"memBirth\" v-model=\"modifyup.memBirth\" ></label><br><hr>\n\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"modify_submit\" value=\"수정완료\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport store from '@/store/index'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\nexport default {\n  \n  data() {\n    store.commit('updateloginUserPW', userPW)\n    console.log('memPW : ', response.data.data.memPW)\n\n    store.commit('updateloginUserName', userName)\n    console.log('memName : ', response.data.data.memName)  \n\n    store.commit('updateloginUserAddr', userAddr)\n    console.log('memAddr : ', response.data.data.memAddr)\n\n    store.commit('updateloginUserPhone', userPhone)\n    console.log('memPhone : ', response.data.data.memPhone)  \n\n    store.commit('updateloginUserBirth', userBirth)\n    console.log('memBirth : ', response.data.data.memBirth)  \n    \n    store.commit('updateloginUserRole', userRole)\n    console.log('memRole : ', response.data.data.memRole.roleCode)\n    return {\n      \n      modifyup: {\n          memID: store.state.loginUser.memID,\n          memPW:      null,\n          memPWCheck: null,\n          memName: store.state.loginUser.memName,\n          memAddr: store.state.loginUser.memAddr,\n          memPhone:store.state.loginUser.memPhone,\n          memEmail :store.state.loginUser.memEmail,\n          memBirth: store.state.loginUser.memBirth,\n          },\n          // idValidFlag: true,\n          passwordValidFlag: true,\n          \n          // idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.modifyup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n\n     passwordCheckValid () {\n      if (this.modifyup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      } else if(store.state.loginUser.memPW === this.modifyup.memPW) {\n        alert(\"이전 비밀번호와 같은 값은 사용할 수 없습니다.\");\t\t\n        return false;\n      } else {\n        alert(\"사용 가능한 비밀번호 입니다.\");\n        return true;\n      }\n    },\n    \n    /* 회원가입 정보 전체 넘기기 */\n    modifyupProc() {    \n\n      // console.log('ID test')\n      \n      if(!this.modifyup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if(!this.modifyup.memPWCheck) {\n        alert(\"비밀번호 체크를 해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.81:9292/mem/modifyupProc', {          \n          memID: this.modifyup.memID,\n          memPW: this.modifyup.memPW,\n          memName: this.modifyup.memName,\n          memAddr: this.modifyup.memAddr,\n          memPhone: this.modifyup.memPhone,\n          memEmail: this.modifyup.memEmail,\n          memBirth: this.modifyup.memBirth \n        }) .then(function ( /* datatest */) {\n            // if(datatest.data.data === 'false') {\n            //   alert(\"기존에 없는 아이디를 생성하시오.\");\n            // } else if(datatest.data.data !== 'true'){\n            //   alert(\"회원가입 완료\");\n            // }\n            //console.log(datatest.data);\n          }).catch(function (error) {\n            console.log(error)\n          })\n      }\n    } // modifyupProc\n  } // methods\n\n} // export default\n</script>"]},"metadata":{},"sourceType":"module"}