{"ast":null,"code":"import { millisecondsInHour, millisecondsInMinute, millisecondsInSecond } from \"../../constants/index.js\";\nimport { numericPatterns } from \"./constants.js\";\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest\n  };\n}\nexport function parseNumericPattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseTimezonePattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: dateString.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","map":{"version":3,"names":["millisecondsInHour","millisecondsInMinute","millisecondsInSecond","numericPatterns","mapValue","parseFnResult","mapFn","value","rest","parseNumericPattern","pattern","dateString","matchResult","match","parseInt","slice","length","parseTimezonePattern","sign","hours","minutes","seconds","parseAnyDigitsSigned","anyDigitsSigned","parseNDigits","n","singleDigit","twoDigits","threeDigits","fourDigits","RegExp","parseNDigitsSigned","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","dayPeriodEnumToHours","dayPeriod","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","result","rangeEnd","rangeEndCentury","Math","floor","isPreviousCentury","isLeapYearIndex","year"],"sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_project/node_modules/date-fns/esm/parse/_lib/utils.js"],"sourcesContent":["import { millisecondsInHour, millisecondsInMinute, millisecondsInSecond } from \"../../constants/index.js\";\nimport { numericPatterns } from \"./constants.js\";\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest\n  };\n}\nexport function parseNumericPattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseTimezonePattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: dateString.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}