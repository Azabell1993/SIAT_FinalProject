{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      signup: {\n        memID: null,\n        memPW: null,\n        memPWCheck: null,\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      },\n      passwordValidFlag: true\n    };\n  },\n\n  computed: {\n    idValid() {\n      return /^[A-Za-z0-9]+$/.test(this.memID);\n    }\n\n  },\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.password)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      }).then(function (idchk) {\n        if (idchk.data.data === 'false') {\n          alert(\"사용 가능\");\n        } else {\n          alert(\"사용 불가\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* ??? */\n\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value; // pw 입력\t\n\n      var mbrPwd = memPW.value;\n\n      if (!check1) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      } else if (check1 === mbrId) {\n        alert('아이디와 비밀번호가 같으면 안됩니다.');\n        return false;\n      }\n\n      return true;\n    }\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"AAkCA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,MAAM,EAAE;QACNC,KAAK,EAAC,IADA;QAENC,KAAK,EAAC,IAFA;QAGNC,UAAU,EAAC,IAHL;QAINC,OAAO,EAAC,EAJF;QAKNC,OAAO,EAAC,EALF;QAMNC,QAAQ,EAAC,EANH;QAONC,QAAQ,EAAC,EAPH;QAQNC,QAAQ,EAAC;MARH,CADL;MAWHC,iBAAiB,EAAE;IAXhB,CAAP;EAaD,CAfY;;EAgBbC,QAAQ,EAAE;IACRC,OAAM,GAAK;MACT,OAAO,iBAAiBC,IAAjB,CAAsB,KAAKX,KAA3B,CAAP;IACF;;EAHQ,CAhBG;EAqBbY,OAAO,EAAE;IACP;IACAC,aAAY,GAAK;MACf,IAAI,6CAA6CF,IAA7C,CAAkD,KAAKZ,MAAL,CAAYe,QAA9D,CAAJ,EAA6E;QAC3E,KAAKN,iBAAL,GAAyB,IAAzB;MACF,CAFA,MAEO;QACL,KAAKA,iBAAL,GAAyB,KAAzB;MACF;IACD,CARM;;IASP;IACAO,OAAM,GAAK;MACTC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAvB,KAAK,CAACwB,IAAN,CAAW,uCAAX,EAAoD;QAClDlB,KAAK,EAAE,KAAKA;MADsC,CAApD,EAGGmB,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QAErB,IAAGA,KAAK,CAACtB,IAAN,CAAWA,IAAX,KAAoB,OAAvB,EAAgC;UAC9BuB,KAAK,CAAC,OAAD,CAAL;QAEF,CAHA,MAGO;UACLA,KAAK,CAAC,OAAD,CAAL;QACF;MAED,CAZH,EAYKC,KAZL,CAYW,UAAUC,KAAV,EAAiB;QACxBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CAdH;IAeD,CA3BM;;IA4BP;;IACA;IACAC,OAAO,GAAG;MACR;MACA,IAAIC,KAAI,GAAIzB,KAAK,CAAC0B,KAAlB,CAFQ,CAIR;;MACA,IAAIC,MAAK,GAAI1B,KAAK,CAACyB,KAAnB;;MAEA,IAAG,CAAEE,MAAL,EAAc;QACZP,KAAK,CAAC,sCAAD,CAAL;QACA,OAAO,KAAP;MACF,CAHA,MAGO,IAAGO,MAAK,KAAMH,KAAd,EAAqB;QAC1BJ,KAAK,CAAC,sBAAD,CAAL;QACA,OAAO,KAAP;MACF;;MACA,OAAO,IAAP;IACF;;EA7CO,CArBI,CAmEX;;AAnEW,CAAf,C,CAqEE","names":["axios","defaults","headers","common","data","signup","memID","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","passwordValidFlag","computed","idValid","test","methods","passwordValid","password","checkId","console","log","post","then","idchk","alert","catch","error","checkPw","mbrId","value","mbrPwd","check1"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\" mexlength=\"20\" @submit.prevent=\"checkId\">\n           <p id=\"userid_msg\"></p></label>\n          <div v-if=\"!idValid\">유효하지 않은 아이디입니다.</div>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n      <p>8 ~ 16자 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" maxlength=\"16\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">\n        비밀번호 확인 : \n      <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\" maxlength=\"16\" @blur=\"passwordValid\"></label><br>\n      <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n      <button>비밀번호 체크</button>\n      </form>\n      \n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        signup: {\n          memID:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:'',\n          memAddr:'',\n          memPhone:'',\n          memEmail:'',\n          memBirth:'',\n        },\n        passwordValidFlag: true\n    };\n  },\n  computed: {\n    idValid () {\n      return /^[A-Za-z0-9]+$/.test(this.memID)\n    }\n  },\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.password)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n\n          } else {\n            alert(\"사용 불가\");\n          }\n\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* ??? */\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value;\n\n      // pw 입력\t\n      var mbrPwd = memPW.value;\n\n      if(!(check1)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\t\n      } else if(check1 === mbrId) {\t\t\n        alert('아이디와 비밀번호가 같으면 안됩니다.');\t\t\n        return false;\t\n      }\n      return true;\n    }\n  } // methods\n\n} // export default\n\n\n</script>\n"]},"metadata":{},"sourceType":"module"}