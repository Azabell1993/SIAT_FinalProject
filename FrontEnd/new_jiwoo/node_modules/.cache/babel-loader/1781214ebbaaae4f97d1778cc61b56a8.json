{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport storeProduct from '@/store/recommendProducts';\nimport axios from 'axios';\nconst url = 'http://10.211.55.2:9292';\nexport default {\n  data() {\n    return {\n      items: [{\n        imgurl: require('@/assets/image/top1.png')\n      }],\n      productInfos: [],\n      recommendProduct: []\n    };\n  },\n\n  computed: {},\n  methods: {\n    //상품 코드를 인자로 받아서, 제품 상세 페이지로 이동시킨다.\n    async productInfoRelay(newProCode) {\n      console.log('값 확인 : ', newProCode);\n      const renewList = storeProduct.state.products.productsList; //저장소에 있는 상품 리스트 값\n\n      console.log(String(Object.values(renewList)).includes(newProCode)); //=> Object형식으로 들어와서, 객체 내의 값을 String값으로 변환시켜서 맞는지 체크시킴,\n      //그 후, 인자 값을 받아서 그 배열 안에 해당 상품코드가 있는지 확인 시킨다.\n\n      const oneCodeCheck = String(Object.values(renewList)).includes(newProCode);\n\n      if (oneCodeCheck == true) {\n        //상품코드가 있다면, 그 상품코드로 상품 정보 요청\n        await axios.post(url + '/pro/proInfo', {\n          proCode: newProCode\n        }).then(function (response) {\n          storeProduct.commit('updateSelectOneProductCode', response.data.data.proCode); //상품 한개만 요청하기 때문에, selectOne으로 지정하고, 각 상품이 클릭시 때마다 업데이트 시킴.\n          //한 상품 클릭 후, 다른 상품 클릭시 해당 상품으로 가는 것까지 확인 됨\n\n          console.log('ProductList code : ', storeProduct.state.selectOneProductCode);\n        });\n      } else {\n        console.log('상품 정보가 존재하지 않습니다.');\n      }\n    }\n\n  },\n\n  //상품 리스트 부분, 페이지가 생성될 때 갖고있는 상품들을 불러와줘야한다.\n  created() {\n    var vm = this;\n    axios.post(url + '/pro/proList', //헤더 : url, value\n    {\n      proList: [1, 2, 3, 4]\n    }) //추천 알고리즘을 만든 곳으로 전달\n    .then(async function (response) {\n      vm.productInfos = response.data;\n      console.log(response.data.data);\n      storeProduct.commit('updateProductList', response.data.data);\n      console.log('저장소에 있는 값 : ', storeProduct.state.products.productsList);\n      const proCodeList = storeProduct.state.products.productsList;\n\n      for (var i = 0; i < proCodeList.length; i++) {\n        // console.log('proCode : ', proCodeList[i])\n        await axios.post(url + '/pro/proInfo', {\n          proCode: proCodeList[i]\n        }).then(function (response) {\n          console.log('상품 정보 : ', response.data.data); // console.log('이미지 정보 : ',response.data.data.imageID)\n          // console.log(vm.recommendProduct)\n\n          vm.recommendProduct.push(response.data.data);\n        });\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["storeProduct","axios","url","data","items","imgurl","require","productInfos","recommendProduct","computed","methods","productInfoRelay","newProCode","console","log","renewList","state","products","productsList","String","Object","values","includes","oneCodeCheck","post","proCode","then","response","commit","selectOneProductCode","created","vm","proList","proCodeList","i","length","push","catch","error"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/components/ProductList.vue"],"sourcesContent":["<template>\n  <div id=\"productList\" v-bind:key=\"name\" v-for=\"name in recommendProduct\">\n    <router-link v-on:click=\"productInfoRelay(name.proCode)\" to=\"/productdetail\">\n      <p>{{ name.proName }}</p>\n    </router-link>\n      <!-- 이미지 부분은 아직 미구현, \n      현재 백엔드에서 이미지 정보 주는 것 까진 확인. 프론트에서 어떻게 뿌리는지 연구해봐야 함 -->\n      <!-- <img v-bind:src=\"require(`@/assets/image/${name.proImage}.png`)\"> -->\n      <p>{{ name.proPrice }}</p>\n  </div>\n</template>\n\n<script>\nimport storeProduct from '@/store/recommendProducts'\nimport axios from 'axios'\n\nconst url = 'http://10.211.55.2:9292'\n\nexport default {\n  data () {\n    return {\n      items: [\n        {\n          imgurl: require('@/assets/image/top1.png'),\n        },\n      ],\n      productInfos: [],\n      recommendProduct: [],\n    }\n  },\n  computed: {\n  \n  },\n  methods: {\n    //상품 코드를 인자로 받아서, 제품 상세 페이지로 이동시킨다.\n    async productInfoRelay (newProCode) {\n      console.log('값 확인 : ', newProCode)\n      const renewList = storeProduct.state.products.productsList //저장소에 있는 상품 리스트 값\n      console.log(String(Object.values(renewList)).includes(newProCode)) \n      //=> Object형식으로 들어와서, 객체 내의 값을 String값으로 변환시켜서 맞는지 체크시킴,\n      //그 후, 인자 값을 받아서 그 배열 안에 해당 상품코드가 있는지 확인 시킨다.\n      \n      const oneCodeCheck = String(Object.values(renewList)).includes(newProCode)\n\n      if(oneCodeCheck == true) { //상품코드가 있다면, 그 상품코드로 상품 정보 요청\n        await axios.post(url+'/pro/proInfo', {\n          proCode : newProCode\n        })\n        .then(function(response){\n          storeProduct.commit('updateSelectOneProductCode',response.data.data.proCode)\n          //상품 한개만 요청하기 때문에, selectOne으로 지정하고, 각 상품이 클릭시 때마다 업데이트 시킴.\n          //한 상품 클릭 후, 다른 상품 클릭시 해당 상품으로 가는 것까지 확인 됨\n          console.log('ProductList code : ',storeProduct.state.selectOneProductCode)\n        })\n      }\n      else {\n        console.log('상품 정보가 존재하지 않습니다.')\n      }\n    }\n  },\n  //상품 리스트 부분, 페이지가 생성될 때 갖고있는 상품들을 불러와줘야한다.\n  created () {\n    var vm = this\n    axios.post(url+'/pro/proList', //헤더 : url, value\n    {\n      proList: [1,2,3,4]\n    }) //추천 알고리즘을 만든 곳으로 전달\n        .then(async function (response) {\n          vm.productInfos = response.data\n          console.log(response.data.data)\n          storeProduct.commit('updateProductList',response.data.data)\n          console.log('저장소에 있는 값 : ',storeProduct.state.products.productsList);\n          const proCodeList = storeProduct.state.products.productsList\n          \n          for(var i=0; i<proCodeList.length; i++) {\n\t          // console.log('proCode : ', proCodeList[i])\n              await axios.post(url+'/pro/proInfo',\n              { \n                proCode: proCodeList[i]\n              })\n              .then(function (response) {\n                console.log('상품 정보 : ',response.data.data)\n                // console.log('이미지 정보 : ',response.data.data.imageID)\n                // console.log(vm.recommendProduct)\n                vm.recommendProduct.push(response.data.data)\n              })\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n},\n\n}\n</script>\n\n<style>\n  img {\n    width : 180px;\n    height: 180px;\n  }\n  #productList {\n    display: inline-block;\n    padding : 10px;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}