{"ast":null,"code":"/*!\n  * Bootstrap scrollbar.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/selector-engine'), require('../dom/manipulator'), require('./index')) : typeof define === 'function' && define.amd ? define(['../dom/selector-engine', '../dom/manipulator', './index'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Scrollbar = factory(global.SelectorEngine, global.Manipulator, global.Index));\n})(this, function (SelectorEngine, Manipulator, index) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n\n  const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n\n  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  const SELECTOR_STICKY_CONTENT = '.sticky-top';\n  const PROPERTY_PADDING = 'padding-right';\n  const PROPERTY_MARGIN = 'margin-right';\n  /**\n   * Class definition\n   */\n\n  class ScrollBarHelper {\n    constructor() {\n      this._element = document.body;\n    } // Public\n\n\n    getWidth() {\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n      const documentWidth = document.documentElement.clientWidth;\n      return Math.abs(window.innerWidth - documentWidth);\n    }\n\n    hide() {\n      const width = this.getWidth();\n\n      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n      this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width);\n\n      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width);\n    }\n\n    reset() {\n      this._resetElementAttributes(this._element, 'overflow');\n\n      this._resetElementAttributes(this._element, PROPERTY_PADDING);\n\n      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n\n      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n    }\n\n    isOverflowing() {\n      return this.getWidth() > 0;\n    } // Private\n\n\n    _disableOverFlow() {\n      this._saveInitialAttribute(this._element, 'overflow');\n\n      this._element.style.overflow = 'hidden';\n    }\n\n    _setElementAttributes(selector, styleProperty, callback) {\n      const scrollbarWidth = this.getWidth();\n\n      const manipulationCallBack = element => {\n        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n          return;\n        }\n\n        this._saveInitialAttribute(element, styleProperty);\n\n        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    _saveInitialAttribute(element, styleProperty) {\n      const actualValue = element.style.getPropertyValue(styleProperty);\n\n      if (actualValue) {\n        Manipulator__default.default.setDataAttribute(element, styleProperty, actualValue);\n      }\n    }\n\n    _resetElementAttributes(selector, styleProperty) {\n      const manipulationCallBack = element => {\n        const value = Manipulator__default.default.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero\n\n        if (value === null) {\n          element.style.removeProperty(styleProperty);\n          return;\n        }\n\n        Manipulator__default.default.removeDataAttribute(element, styleProperty);\n        element.style.setProperty(styleProperty, value);\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    _applyManipulationCallback(selector, callBack) {\n      if (index.isElement(selector)) {\n        callBack(selector);\n        return;\n      }\n\n      for (const sel of SelectorEngine__default.default.find(selector, this._element)) {\n        callBack(sel);\n      }\n    }\n\n  }\n\n  return ScrollBarHelper;\n});","map":{"version":3,"mappings":"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","names":["SELECTOR_FIXED_CONTENT","SELECTOR_STICKY_CONTENT","PROPERTY_PADDING","PROPERTY_MARGIN","ScrollBarHelper","constructor","_element","document","body","getWidth","documentWidth","documentElement","clientWidth","Math","abs","window","innerWidth","hide","width","_disableOverFlow","_setElementAttributes","calculatedValue","reset","_resetElementAttributes","isOverflowing","_saveInitialAttribute","style","overflow","selector","styleProperty","callback","scrollbarWidth","manipulationCallBack","element","getComputedStyle","getPropertyValue","setProperty","Number","parseFloat","_applyManipulationCallback","actualValue","Manipulator","setDataAttribute","value","getDataAttribute","removeProperty","removeDataAttribute","callBack","isElement","sel","SelectorEngine","find"],"sources":["../../src/util/scrollbar.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine'\nimport Manipulator from '../dom/manipulator'\nimport { isElement } from './index'\n\n/**\n * Constants\n */\n\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'\nconst SELECTOR_STICKY_CONTENT = '.sticky-top'\nconst PROPERTY_PADDING = 'padding-right'\nconst PROPERTY_MARGIN = 'margin-right'\n\n/**\n * Class definition\n */\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body\n  }\n\n  // Public\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth\n    return Math.abs(window.innerWidth - documentWidth)\n  }\n\n  hide() {\n    const width = this.getWidth()\n    this._disableOverFlow()\n    // give padding to element to balance the hidden scrollbar width\n    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width)\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow')\n    this._resetElementAttributes(this._element, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN)\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0\n  }\n\n  // Private\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow')\n    this._element.style.overflow = 'hidden'\n  }\n\n  _setElementAttributes(selector, styleProperty, callback) {\n    const scrollbarWidth = this.getWidth()\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return\n      }\n\n      this._saveInitialAttribute(element, styleProperty)\n      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty)\n      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _saveInitialAttribute(element, styleProperty) {\n    const actualValue = element.style.getPropertyValue(styleProperty)\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProperty, actualValue)\n    }\n  }\n\n  _resetElementAttributes(selector, styleProperty) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProperty)\n      // We only want to remove the property if the value is `null`; the value can also be zero\n      if (value === null) {\n        element.style.removeProperty(styleProperty)\n        return\n      }\n\n      Manipulator.removeDataAttribute(element, styleProperty)\n      element.style.setProperty(styleProperty, value)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector)\n      return\n    }\n\n    for (const sel of SelectorEngine.find(selector, this._element)) {\n      callBack(sel)\n    }\n  }\n}\n\nexport default ScrollBarHelper\n"]},"metadata":{},"sourceType":"script"}