{"ast":null,"code":"import axios from 'axios';\nimport store from '@/store/index';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memEmail: store.state.loginUser.memEmail,\n      memBirth: store.state.loginUser.memBirth,\n      signup: {\n        memID: store.state.loginUser.memID,\n        memPW: null,\n        memPWCheck: null,\n        memName: store.state.loginUser.memName,\n        memAddr: store.state.loginUser.memAddr,\n        memPhone: store.state.loginUser.memPhone\n      },\n      // idValidFlag: true,\n      passwordValidFlag: true,\n      // idCheck:'',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else if (store.state.loginUser.memPW === this.signup.memPW) {\n        this.passwordValidFlag = false;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {\n      console.log('ID test');\n\n      if (!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if (!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.88:9292/mem/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth\n        }).then(function\n          /* datatest */\n        () {// if(datatest.data.data === 'false') {\n          //   alert(\"기존에 없는 아이디를 생성하시오.\");\n          // } else if(datatest.data.data !== 'true'){\n          //   alert(\"회원가입 완료\");\n          // }\n          //console.log(datatest.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    } // signUpProc\n\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"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","names":["axios","store","defaults","headers","common","data","memEmail","state","loginUser","memBirth","signup","memID","memPW","memPWCheck","memName","memAddr","memPhone","passwordValidFlag","passwordCheck","methods","passwordValid","test","passwordCheckValid","passwordCheckFlag","checkPw","alert","signUpProc","console","log","post","then","catch","error"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/mypage/ModifyInfo.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>회원  정보 수정 페이지입니다.</h1>\n     </div>\n     \n      <form action=\"/SignUp\" method=\"get\" class=\"usersignup\" @submit.prevent=\"signUpProc\">\n        <p>{{ memID }}님 회원정보 페이지다.</p>\n\n      <form action=\"/PwTest\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : \n        <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\" ref=\"memPWck\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\" ref=\"signup.memPW\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        <!-- <button>비밀번호 체크</button> -->\n        </form>\n        \n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\n        <label for=\"memEmail\">이메일  <input type=\"text\" id=\"memEmail\" v-model=\"memEmail\" ref=\"memEmailck\"></label><br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\"  id=\"memBirth\" v-model=\"memBirth\" ></label><br>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"modify_submit\" value=\"수정완료\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport store from '@/store/index'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  \n  data() {\n    return {\n        memEmail :store.state.loginUser.memEmail,\n        memBirth: store.state.loginUser.memBirth,\n        \n        signup: {\n          memID: store.state.loginUser.memID,\n          memPW:      null,\n          memPWCheck: null,\n          memName: store.state.loginUser.memName,\n          memAddr: store.state.loginUser.memAddr,\n          memPhone:store.state.loginUser.memPhone,\n          },\n          // idValidFlag: true,\n          passwordValidFlag: true,\n          \n          // idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else if ( store.state.loginUser.memPW === this.signup.memPW) {\n        this.passwordValidFlag = false\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n    \n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {    \n\n      console.log('ID test')\n      \n      if(!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if(!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.88:9292/mem/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth  \n        }) .then(function ( /* datatest */) {\n            // if(datatest.data.data === 'false') {\n            //   alert(\"기존에 없는 아이디를 생성하시오.\");\n            // } else if(datatest.data.data !== 'true'){\n            //   alert(\"회원가입 완료\");\n            // }\n            //console.log(datatest.data);\n          }).catch(function (error) {\n            console.log(error)\n          })\n      }\n    } // signUpProc\n  } // methods\n\n} // export default\n</script>"]},"metadata":{},"sourceType":"module"}