{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h1\", null, \"Sign Up 페이지입니다.\")], -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  for: \"memID\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"아이디 : \");\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", {\n  id: \"userid_msg\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", null, \"아이디 중복 체크\", -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"p\", null, \"8 ~ 16자 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = {\n  for: \"memPW\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createTextVNode(\"비밀번호 : \");\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_11 = {\n  for: \"memPWCheck\"\n};\n\nconst _hoisted_12 = /*#__PURE__*/_createTextVNode(\"비밀번호 확인 : \");\n\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"button\", null, \"비밀번호 체크\", -1\n/* HOISTED */\n);\n\nconst _hoisted_15 = {\n  for: \"memName\"\n};\n\nconst _hoisted_16 = /*#__PURE__*/_createTextVNode(\"이름 : \");\n\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_18 = {\n  for: \"memAddr\"\n};\n\nconst _hoisted_19 = /*#__PURE__*/_createTextVNode(\"주소 : \");\n\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_21 = {\n  for: \"memPhone\"\n};\n\nconst _hoisted_22 = /*#__PURE__*/_createTextVNode(\"전화번호 : \");\n\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_24 = {\n  for: \"memEmail\"\n};\n\nconst _hoisted_25 = /*#__PURE__*/_createTextVNode(\"이메일 : \");\n\nconst _hoisted_26 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_27 = {\n  for: \"memBirth\"\n};\n\nconst _hoisted_28 = /*#__PURE__*/_createTextVNode(\"생년월일 : \");\n\nconst _hoisted_29 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_30 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"reset\",\n  value: \"초기화\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_31 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"submit\",\n  id: \"login_submit\",\n  value: \"가입\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"/SignTest\",\n    method: \"get\",\n    class: \"userjoin\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.checkId && $options.checkId(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memID\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.memID = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memID]]), _hoisted_5]), _hoisted_6], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"form\", {\n    action: \"/PwTest\",\n    method: \"get\",\n    class: \"userpwcheck\",\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.checkPw && $options.checkPw(...args), [\"prevent\"]))\n  }, [_hoisted_7, _createElementVNode(\"label\", _hoisted_8, [_hoisted_9, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPW\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.memPW = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memPW]])]), _hoisted_10, _createElementVNode(\"label\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"memPWCheck\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.memPWCheck = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memPWCheck]])]), _hoisted_13, _hoisted_14], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"label\", _hoisted_15, [_hoisted_16, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memName\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.memName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memName]])]), _hoisted_17, _createElementVNode(\"label\", _hoisted_18, [_hoisted_19, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memAddr\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.memAddr = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memAddr]])]), _hoisted_20, _createElementVNode(\"label\", _hoisted_21, [_hoisted_22, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"memPhone\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.memPhone = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memPhone]])]), _hoisted_23, _createElementVNode(\"label\", _hoisted_24, [_hoisted_25, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"memEmail\",\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.memEmail = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memEmail]])]), _hoisted_26, _createElementVNode(\"label\", _hoisted_27, [_hoisted_28, _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"memBirth\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.memBirth = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memBirth]])]), _hoisted_29, _hoisted_30, _hoisted_31]);\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","for","id","type","value","_createElementBlock","_hoisted_2","action","method","onSubmit","$options","$data","$event","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_10","_hoisted_13","_hoisted_14","_hoisted_17","_hoisted_20","_hoisted_23","_hoisted_26","_hoisted_29","_hoisted_30","_hoisted_31"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n      </div>\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"memID\"><p id=\"userid_msg\"></p></label>\n          <button>아이디 중복 체크</button>\n      </form>\n\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n      <p>8 ~ 16자 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"memPW\"></label><br>\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"memPWCheck\"></label><br>\n      <button>비밀번호 체크</button>\n      </form>\n      \n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"memName\"></label><br>\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"memAddr\"></label><br>\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"memPhone\"></label><br>\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"memEmail\"></label>\n      <br>\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"memBirth\"></label><br>\n      <input type=\"reset\" value=\"초기화\">\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  data() {\n    return {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n    };\n  },\n  methods: {\n    /* 아이디 중복 체크 */\n    checkId () {\n      console.log('ID test')\n      axios.post('http://192.168.0.107:9292/idCheckProc', {\n        memID: this.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n\n          } else {\n            alert(\"사용 불가\");\n          }\n\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* DB에 정보 내보내기  */\n    sendDB () {\n      console.log('DB test')\n      axios.post('http://192.168.0.107:9292/', {\n        memID:'',\n        memPW:'',\n        memPWCheck:'',\n        memName:'',\n        memAddr:'',\n        memPhone:'',\n        memEmail:'',\n        memBirth:'',\n      })\n        .then(function () {\n          // console.log(res.data)\n          // console.log(res.data.mem.memID)\n          // console.log(res.data.mem.memRole.roleCode)\n        }).catch(function (error) {\n          console.log(error)\n        })\n    },\n    /* ??? */\n    /* pw check */\n    checkPw() {\n      // id 값 입력\t\n      var mbrId = memID.value;\n\n      // pw 입력\t\n      var mbrPwd = memPW.value;\n\n      var check1 = /^(?=.*[a-zA-z])(?=.*[0-9])(?=.*[$`~!@$!%*#^?&\\\\(\\\\)\\-_=+]).{8,16}$/.test(memPW.value);   \n\n      if(!(check1)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\t}\t\n      if(check1 === mbrId) {\t\t\n        alert('아이디와 비밀번호가 같으면 안됩니다.');\t\t\n        return false;\t\n      }\n      return true;\n    }\n  } // methods\n\n} // export default\n\n</script>\n"]},"metadata":{},"sourceType":"module"}