{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport CategoryList from '@/components/CategoryList.vue';\nimport storeProduct from '@/store/recommendProducts';\nimport axios from 'axios';\nconst url = 'http://192.168.219.162:9292';\nexport default {\n  components: {\n    CategoryList\n  },\n\n  data() {\n    return {\n      productHatInfos: [],\n      hatCodeList: []\n    };\n  },\n\n  async created() {\n    var vm = this;\n    console.log('hatsview : ', storeProduct.state.categoryHatList);\n    this.hatCodeList = storeProduct.state.categoryHatList;\n\n    if (this.hatCodeList == \"\") {\n      console.log('Data가 없습니다.');\n    } else {\n      console.log(Object.values(Object.values(this.hatCodeList)[0]));\n      var hatList = Object.values(Object.values(this.hatCodeList)[0]);\n\n      for (var i = 0; i < hatList.length; i++) {\n        console.log(hatList[i]);\n        await axios.post(url + '/pro/proInfo', {\n          proCode: hatList[i]\n        }).then(function (response) {\n          console.log(response.data.data);\n          vm.productHatInfos.push(response.data.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  },\n\n  methods: {\n    async productInfoRelay(newProCode) {\n      const renewList = storeProduct.state.products.productsList; //저장소에 있는 상품 리스트 값\n\n      const oneCodeCheck = String(Object.values(renewList)).includes(newProCode);\n\n      if (oneCodeCheck == true) {\n        //상품코드가 있다면, 그 상품코드로 상품 정보 요청\n        await axios.post(url + '/pro/proInfo', {\n          proCode: newProCode\n        }).then(function (response) {\n          storeProduct.commit('updateSelectOneProductCode', response.data.data.proCode); //상품 한개만 요청하기 때문에, selectOne으로 지정하고, 각 상품이 클릭시 때마다 업데이트 시킴.\n          //한 상품 클릭 후, 다른 상품 클릭시 해당 상품으로 가는 것까지 확인 됨\n\n          console.log('ProductList code : ', storeProduct.state.selectOneProductCode);\n        });\n      } else {\n        console.log('상품 정보가 존재하지 않습니다.');\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAeA,OAAOA,YAAP,MAAyB,+BAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAE,GAAI,6BAAZ;AAEA,eAAe;EACbC,UAAU,EAAE;IACVJ;EADU,CADC;;EAIbK,IAAG,GAAK;IACN,OAAO;MACLC,eAAe,EAAE,EADZ;MAELC,WAAW,EAAE;IAFR,CAAP;EAID,CATY;;EAUb,MAAMC,OAAN,GAAiB;IACf,IAAIC,EAAC,GAAI,IAAT;IACAC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,YAAY,CAACW,KAAb,CAAmBC,eAA9C;IACA,KAAKN,WAAL,GAAmBN,YAAY,CAACW,KAAb,CAAmBC,eAAtC;;IAEA,IAAI,KAAKN,WAAL,IAAoB,EAAxB,EAA4B;MAC1BG,OAAO,CAACC,GAAR,CAAY,aAAZ;IACF,CAFA,MAIK;MACHD,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,KAAKR,WAAnB,EAAgC,CAAhC,CAAd,CAAZ;MACA,IAAIS,OAAM,GAAIF,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,KAAKR,WAAnB,EAAgC,CAAhC,CAAd,CAAd;;MAEA,KAAK,IAAIU,CAAC,GAAC,CAAX,EAAcA,IAAID,OAAO,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;QACrCP,OAAO,CAACC,GAAR,CAAYK,OAAO,CAACC,CAAD,CAAnB;QACA,MAAMf,KAAK,CAACiB,IAAN,CAAWhB,GAAG,GAAC,cAAf,EACN;UAACiB,OAAM,EAAIJ,OAAO,CAACC,CAAD;QAAlB,CADM,EAELI,IAFK,CAEA,UAAUC,QAAV,EAAoB;UACxBZ,OAAO,CAACC,GAAR,CAAYW,QAAQ,CAACjB,IAAT,CAAcA,IAA1B;UACAI,EAAE,CAACH,eAAH,CAAmBiB,IAAnB,CAAwBD,QAAQ,CAACjB,IAAT,CAAcA,IAAtC;QACD,CALK,EAMLmB,KANK,CAMC,UAAUC,KAAV,EAAiB;UACtBf,OAAO,CAACC,GAAR,CAAYc,KAAZ;QACD,CARK,CAAN;MASF;IACD;EACA,CApCU;;EAqCXC,OAAO,EAAE;IACT,MAAMC,gBAAN,CAAwBC,UAAxB,EAAoC;MAClC,MAAMC,SAAQ,GAAI5B,YAAY,CAACW,KAAb,CAAmBkB,QAAnB,CAA4BC,YAA9C,CADkC,CACyB;;MAC3D,MAAMC,YAAW,GAAIC,MAAM,CAACnB,MAAM,CAACC,MAAP,CAAcc,SAAd,CAAD,CAAN,CAAiCK,QAAjC,CAA0CN,UAA1C,CAArB;;MAEA,IAAGI,YAAW,IAAK,IAAnB,EAAyB;QAAE;QACzB,MAAM9B,KAAK,CAACiB,IAAN,CAAWhB,GAAG,GAAC,cAAf,EAA+B;UACnCiB,OAAM,EAAIQ;QADyB,CAA/B,EAGLP,IAHK,CAGA,UAASC,QAAT,EAAkB;UACtBrB,YAAY,CAACkC,MAAb,CAAoB,4BAApB,EAAiDb,QAAQ,CAACjB,IAAT,CAAcA,IAAd,CAAmBe,OAApE,EADsB,CAEtB;UACA;;UACAV,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCV,YAAY,CAACW,KAAb,CAAmBwB,oBAArD;QACD,CARK,CAAN;MASF,CAVA,MAWK;QACH1B,OAAO,CAACC,GAAR,CAAY,mBAAZ;MACF;IACF;;EAnBS;AArCE,CAAf","names":["CategoryList","storeProduct","axios","url","components","data","productHatInfos","hatCodeList","created","vm","console","log","state","categoryHatList","Object","values","hatList","i","length","post","proCode","then","response","push","catch","error","methods","productInfoRelay","newProCode","renewList","products","productsList","oneCodeCheck","String","includes","commit","selectOneProductCode"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/product/AccessoryView.vue"],"sourcesContent":["<template>\n<div>\n  <CategoryList></CategoryList>\n  <h1>모자 페이지입니다.</h1>\n  <div id=\"productList\" v-bind:key=\"item\" v-for=\"item in productHatInfos\">\n    <router-link v-on:click=\"productInfoRelay(item.proCode)\" to=\"/productdetail\">\n      <p>{{item.proName}}</p>\n      <!-- <img v-bind:src=\"require(`@/assets/image/${item.proImage}.png`)\"> -->\n    </router-link>\n    <p>{{item.proPrice}}</p>\n  </div>\n</div>\n</template>\n\n<script>\nimport CategoryList from '@/components/CategoryList.vue'\nimport storeProduct from '@/store/recommendProducts'\nimport axios from 'axios'\n\nconst url = 'http://192.168.219.162:9292'\n\nexport default {\n  components: {\n    CategoryList\n  },\n  data () {\n    return {\n      productHatInfos: [],\n      hatCodeList: []\n    }\n  },\n  async created () {\n    var vm = this\n    console.log('hatsview : ', storeProduct.state.categoryHatList)\n    this.hatCodeList = storeProduct.state.categoryHatList\n    \n    if (this.hatCodeList == \"\") {\n      console.log('Data가 없습니다.')\n    }\n\n    else {\n      console.log(Object.values(Object.values(this.hatCodeList)[0]))\n      var hatList = Object.values(Object.values(this.hatCodeList)[0])\n    \n      for (var i=0 ;i < hatList.length; i++) {\n        console.log(hatList[i])\n        await axios.post(url+'/pro/proInfo', \n        {proCode : hatList[i]})\n        .then(function (response) {\n          console.log(response.data.data);\n          vm.productHatInfos.push(response.data.data)\n        })\n        .catch(function (error) {\n          console.log(error);\n        })\n      }\n     }\n    },\n    methods: {\n    async productInfoRelay (newProCode) {\n      const renewList = storeProduct.state.products.productsList //저장소에 있는 상품 리스트 값\n      const oneCodeCheck = String(Object.values(renewList)).includes(newProCode)\n\n      if(oneCodeCheck == true) { //상품코드가 있다면, 그 상품코드로 상품 정보 요청\n        await axios.post(url+'/pro/proInfo', {\n          proCode : newProCode\n        })\n        .then(function(response){\n          storeProduct.commit('updateSelectOneProductCode',response.data.data.proCode)\n          //상품 한개만 요청하기 때문에, selectOne으로 지정하고, 각 상품이 클릭시 때마다 업데이트 시킴.\n          //한 상품 클릭 후, 다른 상품 클릭시 해당 상품으로 가는 것까지 확인 됨\n          console.log('ProductList code : ',storeProduct.state.selectOneProductCode)\n        })\n      }\n      else {\n        console.log('상품 정보가 존재하지 않습니다.')\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}