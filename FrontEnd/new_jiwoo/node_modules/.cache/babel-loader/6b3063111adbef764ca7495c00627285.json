{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Login 페이지입니다.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  for: \"memID\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"ID : \");\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  for: \"memPW\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_createTextVNode(\"PW : \");\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"button\", null, \"Send\", -1\n/* HOISTED */\n);\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.sendPost && $options.sendPost(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" sendPost 함수 실행 \"), _createElementVNode(\"label\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    id: \"memID\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.memID = $event),\n    type: \"text\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memID]])]), _hoisted_4, _hoisted_5, _createElementVNode(\"label\", _hoisted_6, [_hoisted_7, _withDirectives(_createElementVNode(\"input\", {\n    id: \"memPW\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.memPW = $event),\n    type: \"password\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.memPW]])]), _hoisted_8, _hoisted_9, _hoisted_10, _hoisted_11, _createCommentVNode(\" @click=\\\"onClickRedirect()\\\" 로그인 성공시 화면 이동 \")], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,EAAiB;AAAA;AAAjB;;;EAGWC,GAAG,EAAC;;;iDAAQ;;gCAA2DD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAAIA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EAC3EC,GAAG,EAAC;;;iDAAQ;;gCAA+DD,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAAIA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;iCACtFA,oBAAqB,QAArB,EAAqB,IAArB,EAAQ,MAAR,EAAY;AAAA;AAAZ;;iCAAqBA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;uBANzBE,oBAUM,KAVN,EAUM,IAVN,EAUM,CATNC,UASM,EAPNH,oBAMO,MANP,EAMO;IANAI,QAAM,wDAAUC,+CAAV,EAAkB,WAAlB;EAMN,CANP,GAAmCC,yCAC/BN,oBAA8E,OAA9E,cAA8E,6BAAtDA,oBAA8C,OAA9C,EAA8C;IAAvCO,EAAE,EAAC,OAAoC;+DAAnBC,cAAKC,OAAc;IAAZC,IAAI,EAAC;EAAO,CAA9C;;EAAA,kBAA2BF,cAA2B,CAA9E,GAA8EG,YAAIC,YAClFZ,oBAAkF,OAAlF,cAAkF,6BAA1DA,oBAAkD,OAAlD,EAAkD;IAA3CO,EAAE,EAAC,OAAwC;+DAAvBC,cAAKC,OAAkB;IAAhBC,IAAI,EAAC;EAAW,CAAlD;;EAAA,kBAA2BF,cAA+B,CAAlF,GAAkFK,YAAIC,YACtFC,aAAqBC,aACrBV,oEAJJ;;EAAA,CAOM,CAVN","names":["_createElementVNode","for","_createElementBlock","_hoisted_1","onSubmit","$options","_createCommentVNode","id","$data","$event","type","_hoisted_4","_hoisted_5","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/LoginView.vue"],"sourcesContent":["<template>\n    <div>\n    <h1>Login 페이지입니다.</h1>\n    \n    <form @submit.prevent=\"sendPost\">  <!-- sendPost 함수 실행 -->\n        <label for=\"memID\">ID : <input id=\"memID\" v-model=\"memID\" type=\"text\"></label><br><br>\n        <label for=\"memPW\">PW : <input id=\"memPW\" v-model=\"memPW\" type=\"password\"></label><br><br>\n        <button>Send</button><br>\n        <!-- @click=\"onClickRedirect()\" 로그인 성공시 화면 이동 -->\n\n    </form>\n    </div>\n</template>\n<script>\nimport axios from 'axios'\nimport store from '@/store/index'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n\n  data() {\n    return {\n      memID: this.memID,\n      memPW : this.memPW\n    }\n  },\n  \n  methods: {\n    sendPost () {\n      const userId = this.memID; //변수 선언 이 값을 그대로 쓰겠다. 자스 내에선 this 선언 부분이 다를 수있음. 당분간 이게 좀 안전할 듯\n\n      //console.log(userId);\n\n      axios.post('http://192.168.0.81:9292/mem/loginProc', {\n        memID: this.memID,\n        memPW: this.memPW,\n      })\n        .then(function (response) { //될떄 실행하는 함수\n          //console.log(response.data)\n          if(response.data.mem.memID == userId){\n            console.log(\"ID가 일치합니다.\")\n            // location.href = \"http://localhost:8080/\"\n            \n            axios.post('http://192.168.0.81:9292/mem/memberInfo', \n            {\n              memID : userId\n            })\n            .then(function(response) {\n              // console.log(response.data)\n              // console.log('memPW : ',response.data.data.memPW)\n              store.commit('updateloginUserID', response.data.data.memID) //로그인이 성공하는 과정에서 memID를 조회해서 정보를 가져오는건가?\n              console.log('storer 값 저장 확인 : ', store.state.loginUser.memID)\n              console.log('memID : ', response.data.data.memID)\n\n              store.commit('updateloginUserPW', response.data.data.memPW)\n              console.log('memPW : ', response.data.data.memPW)\n\n              store.commit('updateloginUserName', response.data.data.memName)\n              console.log('memName : ', response.data.data.memName)\n\n              store.commit('updateloginUserAddr', response.data.data.memAddr)\n              console.log('memAddr : ', response.data.data.memAddr)\n\n              store.commit('updateloginUserPhone', response.data.data.memPhone)\n              console.log('memPhone : ', response.data.data.memPhone)\n\n              store.commit('updateloginUserBirth', response.data.data.memBirth)\n              console.log('memBirth : ', response.data.data.memBirth)\n\n              store.commit('updateloginUserBirth', response.data.data.memBirth)\n              console.log('memBirth : ', response.data.data.memBirth)\n\n              store.commit('updateloginUserRole', response.data.data.memRole)\n              console.log('memRole : ', response.data.data.memRole.roleCode)\n\n              store.commit('updateloginUserEmail', response.data.data.memEmail)\n              console.log('memEmail : ', response.data.data.memEmail)\n\n            })\n          }\n          else{\n            alert('ID 혹은 비밀번호가 틀렸습니다')\n          }\n          // store.commit('updateloginUserID',this.memID)\n          console.log(`login : ${store.state.loginUser.memID}`) //store에 있는 ID 값 체크\n        }).catch(function (error) { // 뭔가 실패할때 쓰는 함수\n          console.log(error);\n        })\n        console.log(\"end\")\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}