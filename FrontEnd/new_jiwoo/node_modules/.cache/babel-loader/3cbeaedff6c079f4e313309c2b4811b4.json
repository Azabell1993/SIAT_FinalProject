{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*!\n  * Bootstrap config.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./index'), require('../dom/manipulator')) : typeof define === 'function' && define.amd ? define(['./index', '../dom/manipulator'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Config = factory(global.Index, global.Manipulator));\n})(this, function (index, Manipulator) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n\n  const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Class definition\n   */\n\n\n  class Config {\n    // Getters\n    static get Default() {\n      return {};\n    }\n\n    static get DefaultType() {\n      return {};\n    }\n\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n\n    _getConfig(config) {\n      config = this._mergeConfigObj(config);\n      config = this._configAfterMerge(config);\n\n      this._typeCheckConfig(config);\n\n      return config;\n    }\n\n    _configAfterMerge(config) {\n      return config;\n    }\n\n    _mergeConfigObj(config, element) {\n      const jsonConfig = index.isElement(element) ? Manipulator__default.default.getDataAttribute(element, 'config') : {}; // try to parse\n\n      return { ...this.constructor.Default,\n        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n        ...(index.isElement(element) ? Manipulator__default.default.getDataAttributes(element) : {}),\n        ...(typeof config === 'object' ? config : {})\n      };\n    }\n\n    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n      for (const property of Object.keys(configTypes)) {\n        const expectedTypes = configTypes[property];\n        const value = config[property];\n        const valueType = index.isElement(value) ? 'element' : index.toType(value);\n\n        if (!new RegExp(expectedTypes).test(valueType)) {\n          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n        }\n      }\n    }\n\n  }\n\n  return Config;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;EAAA;;;;;;;EAUA;;;;;EAIA,MAAMA,MAAN,CAAa;IACX;IACkB,WAAPC,OAAO,GAAG;MACnB,OAAO,EAAP;IACD;;IAEqB,WAAXC,WAAW,GAAG;MACvB,OAAO,EAAP;IACD;;IAEc,WAAJC,IAAI,GAAG;MAChB,MAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;IACD;;IAEDC,UAAU,CAACC,MAAD,EAAS;MACjBA,MAAM,GAAG,KAAKC,eAAL,CAAqBD,MAArB,CAATA;MACAA,MAAM,GAAG,KAAKE,iBAAL,CAAuBF,MAAvB,CAATA;;MACA,KAAKG,gBAAL,CAAsBH,MAAtB;;MACA,OAAOA,MAAP;IACD;;IAEDE,iBAAiB,CAACF,MAAD,EAAS;MACxB,OAAOA,MAAP;IACD;;IAEDC,eAAe,CAACD,MAAD,EAASI,OAAT,EAAkB;MAC/B,MAAMC,UAAU,GAAGC,gBAAUF,OAAVE,IAAqBC,6BAAYC,gBAAZD,CAA6BH,OAA7BG,EAAsC,QAAtCA,CAArBD,GAAuE,EAA1F,CAD+B;;MAG/B,OAAO,EACL,GAAG,KAAKG,WAAL,CAAiBd,OADf;QAEL,IAAI,OAAOU,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8C,EAAlD,CAFK;QAGL,IAAIC,gBAAUF,OAAVE,IAAqBC,6BAAYG,iBAAZH,CAA8BH,OAA9BG,CAArBD,GAA8D,EAAlE,CAHK;QAIL,IAAI,OAAON,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAA1C;MAJK,CAAP;IAMD;;IAEDG,gBAAgB,CAACH,MAAD,EAASW,WAAW,GAAG,KAAKF,WAAL,CAAiBb,WAAxC,EAAqD;MACnE,KAAK,MAAMgB,QAAX,IAAuBC,MAAM,CAACC,IAAPD,CAAYF,WAAZE,CAAvB,EAAiD;QAC/C,MAAME,aAAa,GAAGJ,WAAW,CAACC,QAAD,CAAjC;QACA,MAAMI,KAAK,GAAGhB,MAAM,CAACY,QAAD,CAApB;QACA,MAAMK,SAAS,GAAGX,gBAAUU,KAAVV,IAAmB,SAAnBA,GAA+BY,aAAOF,KAAPE,CAAjD;;QAEA,IAAI,CAAC,IAAIC,MAAJ,CAAWJ,aAAX,EAA0BK,IAA1B,CAA+BH,SAA/B,CAAL,EAAgD;UAC9C,MAAM,IAAII,SAAJ,CACH,GAAE,KAAKZ,WAAL,CAAiBZ,IAAjB,CAAsByB,WAAtB,EAAoC,aAAYV,QAAS,oBAAmBK,SAAiCF,qCAAc,IAD1H,CAAN;QAGD;MACF;IACF;;EAhDU","names":["Config","Default","DefaultType","NAME","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","isElement","Manipulator","getDataAttribute","constructor","getDataAttributes","configTypes","property","Object","keys","expectedTypes","value","valueType","toType","RegExp","test","TypeError","toUpperCase"],"sources":["../../src/util/config.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index'\nimport Manipulator from '../dom/manipulator'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n"]},"metadata":{},"sourceType":"script"}