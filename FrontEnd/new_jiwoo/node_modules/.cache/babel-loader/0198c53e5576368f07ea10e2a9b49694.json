{"ast":null,"code":"import axios from 'axios';\nimport store from '@/store/index';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  methods: {\n    sendPost() {\n      const userId = this.memID; //변수 선언 이 값을 그대로 쓰겠다. 자스 내에선 this 선언 부분이 다를 수있음. 당분간 이게 좀 안전할 듯\n\n      var userPW = this.memPW;\n      var userName = this.memName;\n      var userAddr = this.memAddr;\n      var userPhone = this.memPhone;\n      var userBirth = this.memBirth;\n      var userRole = this.memRole; //console.log(userId);\n\n      axios.post('http://192.168.0.81:9292/mem/loginProc', {\n        memID: this.memID,\n        memPW: this.memPW,\n        memName: this.memName,\n        memAddr: this.memAddr,\n        memPhone: this.memPhone,\n        memBirth: this.memBirth,\n        memRole: this.memRole\n      }).then(function (response) {\n        //될떄 실행하는 함수\n        //console.log(response.data)\n        if (response.data.mem.memID == userId) {\n          console.log(\"ID가 일치합니다.\"); // location.href = \"http://localhost:8080/\"\n\n          axios.post('http://192.168.0.81:9292/mem/memberInfo', {\n            memID: userId,\n            memPW: userPW,\n            memName: userName,\n            memAddr: userAddr,\n            memPhone: userPhone,\n            memBirth: userBirth,\n            memRole: userRole\n          }).then(function (response) {\n            // console.log(response.data)\n            // console.log('memPW : ',response.data.data.memPW)\n            store.commit('updateloginUserID', response.data.data.memID); //로그인이 성공하는 과정에서 memID를 조회해서 정보를 가져오는건가?\n\n            console.log('storer 값 저장 확인 : ', store.state.loginUser.memID);\n            console.log('memID : ', response.data.data.memID);\n            store.commit('updateloginUserPW', response.data.data.memPW);\n            console.log('memPW : ', response.data.data.memPW);\n            store.commit('updateloginUserName', response.data.data.memName);\n            console.log('memName : ', response.data.data.memName);\n            store.commit('updateloginUserAddr', response.data.data.memAddr);\n            console.log('memAddr : ', response.data.data.memAddr);\n            store.commit('updateloginUserPhone', response.data.data.memPhone);\n            console.log('memPhone : ', response.data.data.memPhone);\n            store.commit('updateloginUserBirth', response.data.data.memBirth);\n            console.log('memBirth : ', response.data.data.memBirth);\n            store.commit('updateloginUserRole', response.data.data.userRole);\n            console.log('memRole : ', response.data.data.memRole.roleCode);\n          });\n        } else {\n          alert('ID 혹은 비밀번호가 틀렸습니다');\n        } // store.commit('updateloginUserID',this.memID)\n\n\n        console.log(`login : ${store.state.loginUser.memID}`); //store에 있는 ID 값 체크\n      }).catch(function (error) {\n        // 뭔가 실패할때 쓰는 함수\n        console.log(error);\n      });\n      console.log(\"end\");\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","store","defaults","headers","common","methods","sendPost","userId","memID","userPW","memPW","userName","memName","userAddr","memAddr","userPhone","memPhone","userBirth","memBirth","userRole","memRole","post","then","response","data","mem","console","log","commit","state","loginUser","roleCode","alert","catch","error"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/LoginView.vue"],"sourcesContent":["<template>\n    <div>\n    <h1>Login 페이지입니다.</h1>\n    \n    <form @submit.prevent=\"sendPost\">  <!-- sendPost 함수 실행 -->\n        <label for=\"memID\">ID : <input id=\"memID\" v-model=\"memID\" type=\"text\"></label><br><br>\n        <label for=\"memPW\">PW : <input id=\"memPW\" v-model=\"memPW\" type=\"password\"></label><br><br>\n        <button>Send</button><br>\n        <!-- @click=\"onClickRedirect()\" 로그인 성공시 화면 이동 -->\n        {{ memID }}\n    </form>\n    </div>\n</template>\n<script>\nimport axios from 'axios'\nimport store from '@/store/index'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  methods: {\n    sendPost () {\n      const userId = this.memID; //변수 선언 이 값을 그대로 쓰겠다. 자스 내에선 this 선언 부분이 다를 수있음. 당분간 이게 좀 안전할 듯\n      var userPW = this.memPW;\n      var userName = this.memName;\n      var userAddr = this.memAddr;\n      var userPhone = this.memPhone;\n      var userBirth = this.memBirth;\n      var userRole = this.memRole;\n      //console.log(userId);\n\n      axios.post('http://192.168.0.81:9292/mem/loginProc', {\n        memID: this.memID,\n        memPW: this.memPW,\n        memName : this.memName,\n        memAddr : this.memAddr,\n        memPhone: this.memPhone,\n        memBirth: this.memBirth,\n        memRole  : this.memRole\n      })\n        .then(function (response) { //될떄 실행하는 함수\n          //console.log(response.data)\n          if(response.data.mem.memID == userId){\n            console.log(\"ID가 일치합니다.\")\n            // location.href = \"http://localhost:8080/\"\n            \n            axios.post('http://192.168.0.81:9292/mem/memberInfo', \n            {\n              memID : userId,\n              memPW : userPW,\n              memName : userName,\n              memAddr : userAddr,\n              memPhone : userPhone,\n              memBirth : userBirth,\n              memRole : userRole\n            })\n            .then(function(response) {\n              // console.log(response.data)\n              // console.log('memPW : ',response.data.data.memPW)\n              store.commit('updateloginUserID', response.data.data.memID) //로그인이 성공하는 과정에서 memID를 조회해서 정보를 가져오는건가?\n              console.log('storer 값 저장 확인 : ',store.state.loginUser.memID)\n              console.log('memID : ',response.data.data.memID)\n\n              store.commit('updateloginUserPW', response.data.data.memPW)\n              console.log('memPW : ', response.data.data.memPW)\n\n              store.commit('updateloginUserName', response.data.data.memName)\n              console.log('memName : ', response.data.data.memName)\n\n              store.commit('updateloginUserAddr', response.data.data.memAddr)\n              console.log('memAddr : ', response.data.data.memAddr)\n\n              store.commit('updateloginUserPhone', response.data.data.memPhone)\n              console.log('memPhone : ', response.data.data.memPhone)\n\n              store.commit('updateloginUserBirth', response.data.data.memBirth)\n              console.log('memBirth : ', response.data.data.memBirth)\n\n              store.commit('updateloginUserRole', response.data.data.userRole)\n              console.log('memRole : ', response.data.data.memRole.roleCode)\n\n            })\n          }\n          else{\n            alert('ID 혹은 비밀번호가 틀렸습니다')\n          }\n          // store.commit('updateloginUserID',this.memID)\n          console.log(`login : ${store.state.loginUser.memID}`) //store에 있는 ID 값 체크\n        }).catch(function (error) { // 뭔가 실패할때 쓰는 함수\n          console.log(error);\n        })\n        console.log(\"end\")\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}