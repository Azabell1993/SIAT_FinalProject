{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date | Number} dateToCompare - the date to compare with\n * @param {Array<Date> | Array<number>} datesArray - the array to search\n * @returns {Date | undefined} the date from the array closest to the given date or undefined if no valid value is given\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return new Date(NaN);\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < Number(minDistance)) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["toDate","requiredArgs","closestTo","dirtyDateToCompare","dirtyDatesArray","arguments","dateToCompare","isNaN","Number","Date","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","currentDate","distance","Math","abs"],"sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_project/node_modules/date-fns/esm/closestTo/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date | Number} dateToCompare - the date to compare with\n * @param {Array<Date> | Array<number>} datesArray - the array to search\n * @returns {Date | undefined} the date from the array closest to the given date or undefined if no valid value is given\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return new Date(NaN);\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < Number(minDistance)) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,kBAAnB,EAAuCC,eAAvC,EAAwD;EACrEH,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;EACA,IAAIC,aAAa,GAAGN,MAAM,CAACG,kBAAD,CAA1B;EACA,IAAII,KAAK,CAACC,MAAM,CAACF,aAAD,CAAP,CAAT,EAAkC,OAAO,IAAIG,IAAJ,CAASC,GAAT,CAAP;EAClC,IAAIC,aAAa,GAAGL,aAAa,CAACM,OAAd,EAApB;EACA,IAAIC,UAAJ,CALqE,CAKrD;;EAEhB,IAAIT,eAAe,IAAI,IAAvB,EAA6B;IAC3BS,UAAU,GAAG,EAAb,CAD2B,CACV;EAClB,CAFD,MAEO,IAAI,OAAOT,eAAe,CAACU,OAAvB,KAAmC,UAAvC,EAAmD;IACxDD,UAAU,GAAGT,eAAb,CADwD,CAC1B;EAC/B,CAFM,MAEA;IACLS,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bd,eAA3B,CAAb;EACD;;EAED,IAAIe,MAAJ;EACA,IAAIC,WAAJ;EACAP,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqB;IACtC,IAAIC,WAAW,GAAGtB,MAAM,CAACqB,SAAD,CAAxB;;IAEA,IAAId,KAAK,CAACC,MAAM,CAACc,WAAD,CAAP,CAAT,EAAgC;MAC9BH,MAAM,GAAG,IAAIV,IAAJ,CAASC,GAAT,CAAT;MACAU,WAAW,GAAGV,GAAd;MACA;IACD;;IAED,IAAIa,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASd,aAAa,GAAGW,WAAW,CAACV,OAAZ,EAAzB,CAAf;;IAEA,IAAIO,MAAM,IAAI,IAAV,IAAkBI,QAAQ,GAAGf,MAAM,CAACY,WAAD,CAAvC,EAAsD;MACpDD,MAAM,GAAGG,WAAT;MACAF,WAAW,GAAGG,QAAd;IACD;EACF,CAfD;EAgBA,OAAOJ,MAAP;AACD"},"metadata":{},"sourceType":"module"}