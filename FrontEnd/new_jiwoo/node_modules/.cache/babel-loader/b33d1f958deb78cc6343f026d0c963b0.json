{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memEmail: 'test@test.com',\n      memBirth: '1990-01-01',\n      signup: {\n        memID: null,\n        memIDCheck: null,\n        memPW: null,\n        memPWCheck: null,\n        memName: null,\n        memAddr: null,\n        memPhone: '010-1234-5678'\n      },\n      idValidFlag: true,\n      passwordValidFlag: true,\n      idCheck: '',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    idValid() {\n      if (/^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {\n        this.idValidFlag = true;\n      } else {\n        this.idValidFlag = false;\n      }\n    },\n\n    idCheckValid() {\n      if (this.signup.memID === this.idCheck) {\n        this.idCheck = true;\n      } else {\n        this.idCheck = false;\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      //console.log('ID test')\n\n      /* 정규식 검사 */\n      if (!this.idValidFlag) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else {\n        /* DB와 비교하기 */\n        axios.post('http://192.168.0.81:9292/mem/idCheckProc', {\n          memID: this.signup.memID\n        }).then(function (idchk) {\n          if (idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {\n      //console.log('ID test')\n      if (!this.signup.memID) {\n        alert(\"아이디를 입력해주세요!\");\n        return false;\n      } else if (!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if (!this.signup.memPWCheck) {\n        alert(\"비밀번호 확인을 해주세요!\");\n        return false;\n      } else if (!this.signup.memName) {\n        alert(\"이름을 입력해주세요!\");\n        return false;\n      } else if (!this.signup.memAddr) {\n        alert(\"주소를 입력해주세요!\");\n        return false;\n      } else if (!this.signup.memPhone) {\n        alert(\"전화번호를 입력해주세요!\");\n        return false;\n      } else if (!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        return false;\n      } else if (!this.memEmail) {\n        alert(\"생년월일을 입력해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.81:9292/mem/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth\n        }).then(function (datatest) {\n          if (datatest.data.data === 'false') {\n            alert(\"기존에 없는 아이디를 생성하시오.\");\n          } else {\n            alert(\"회원가입 완료\");\n          } //console.log(datatest.data);\n\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    } // signUpProc\n\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"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","names":["axios","defaults","headers","common","data","memEmail","memBirth","signup","memID","memIDCheck","memPW","memPWCheck","memName","memAddr","memPhone","idValidFlag","passwordValidFlag","idCheck","passwordCheck","methods","idValid","test","idCheckValid","passwordValid","passwordCheckValid","passwordCheckFlag","checkId","alert","post","then","idchk","catch","error","console","log","checkPw","signUpProc","datatest"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_jiwoo/src/views/SignView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>Sign Up 페이지입니다.</h1>\n     </div>\n     \n      <form action=\"/SignUp\" method=\"get\" class=\"usersignup\" @submit.prevent=\"signUpProc\">\n        <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\n            <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\"  @blur=\"idValid\" ref=\"memIDck\"><p id=\"userid_msg\"></p></label>\n            <!-- <label for=\"memIDCheck\">아이디 확인 : <input type=\"text\" id=\"memIDCheck\" v-model=\"signup.memIDCheck\" mexlength=\"20\"  @blur=\"idCheckValid\"><p id=\"userid_msg\"></p></label> -->\n            <div v-if=\"!idValidFlag\">유효하지 않은 아이디입니다.</div>\n            <button>아이디 사용 가능 체크</button>\n        </form>\n\n      <form action=\"/PwTest\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\n        <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\n        <label for=\"memPW\">비밀번호 : \n        <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\" ref=\"memPWck\"></label><br>\n        <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\" ref=\"signup.memPW\"></label><br>\n        <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\n        <!-- <button>비밀번호 체크</button> -->\n        </form>\n        \n        <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\n        <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\n        <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\n        <label for=\"memEmail\">이메일  <input type=\"text\" id=\"memEmail\" v-model=\"memEmail\" ref=\"memEmailck\"></label><br>\n        <label for=\"memBirth\">생년월일 : <input type=\"date\"  id=\"memBirth\" v-model=\"memBirth\" ></label><br>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"login_submit\" value=\"가입\">\n      </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  \n  data() {\n    return {\n        memEmail:'test@test.com',\n        memBirth:'1990-01-01',\n        \n        signup: {\n          memID:null,\n          memIDCheck:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:null,\n          memAddr:null,\n          memPhone:'010-1234-5678',\n          },\n          idValidFlag: true,\n          passwordValidFlag: true,\n          \n          idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n    idValid () {\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \n        this.idValidFlag = true\n      } else {\n        this.idValidFlag = false\n      }\n    },\n    idCheckValid() {\n        if (this.signup.memID === this.idCheck) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n    /* 아이디 중복 체크 */\n    checkId () {\n      //console.log('ID test')\n\n      /* 정규식 검사 */\n      if(!(this.idValidFlag)) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else{\n         /* DB와 비교하기 */\n      axios.post('http://192.168.0.81:9292/mem/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n      }\n\n    },\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n    \n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {    \n\n      //console.log('ID test')\n\n      if(!this.signup.memID) {\n        alert(\"아이디를 입력해주세요!\");\n        return false;\n      } else if(!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        return false;\n      } else if(!this.signup.memPWCheck) {\n        alert(\"비밀번호 확인을 해주세요!\");\n        return false;\n      } else if(!this.signup.memName) {\n        alert(\"이름을 입력해주세요!\");\n        return false;\n      } else if(!this.signup.memAddr) {\n        alert(\"주소를 입력해주세요!\");\n        return false;\n      } else if(!this.signup.memPhone) {\n        alert(\"전화번호를 입력해주세요!\");\n        return false;\n      } else if(!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        return false;\n      } else if(!this.memEmail) {\n        alert(\"생년월일을 입력해주세요!\");\n        return false;\n      } else {\n        axios.post('http://192.168.0.81:9292/mem/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth  \n        }) .then(function (datatest) {\n            if(datatest.data.data === 'false') {\n              alert(\"기존에 없는 아이디를 생성하시오.\");\n            } else {\n              alert(\"회원가입 완료\");\n            }\n            //console.log(datatest.data);\n          }).catch(function (error) {\n            console.log(error)\n          })\n      }\n    } // signUpProc\n  } // methods\n\n} // export default\n</script>"]},"metadata":{},"sourceType":"module"}