{"ast":null,"code":"require(\"core-js/modules/es.array.includes.js\");\n\n/*!\n  * Bootstrap sanitizer.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Sanitizer = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  const allowedAttribute = (attribute, allowedAttributeList) => {\n    const attributeName = attribute.nodeName.toLowerCase();\n\n    if (allowedAttributeList.includes(attributeName)) {\n      if (uriAttributes.has(attributeName)) {\n        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n      }\n\n      return true;\n    } // Check if a regular expression validates the attribute.\n\n\n    return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp).some(regex => regex.test(attributeName));\n  };\n\n  const DefaultAllowlist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n\n  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n      return sanitizeFunction(unsafeHtml);\n    }\n\n    const domParser = new window.DOMParser();\n    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n    for (const element of elements) {\n      const elementName = element.nodeName.toLowerCase();\n\n      if (!Object.keys(allowList).includes(elementName)) {\n        element.remove();\n        continue;\n      }\n\n      const attributeList = [].concat(...element.attributes);\n      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n\n      for (const attribute of attributeList) {\n        if (!allowedAttribute(attribute, allowedAttributes)) {\n          element.removeAttribute(attribute.nodeName);\n        }\n      }\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n\n  exports.DefaultAllowlist = DefaultAllowlist;\n  exports.sanitizeHtml = sanitizeHtml;\n  Object.defineProperties(exports, {\n    __esModule: {\n      value: true\n    },\n    [Symbol.toStringTag]: {\n      value: 'Module'\n    }\n  });\n});","map":{"version":3,"mappings":"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","names":["uriAttributes","Set","ARIA_ATTRIBUTE_PATTERN","SAFE_URL_PATTERN","DATA_URL_PATTERN","allowedAttribute","attribute","allowedAttributeList","attributeName","nodeName","toLowerCase","includes","has","Boolean","test","nodeValue","filter","attributeRegex","RegExp","some","regex","DefaultAllowlist","a","area","b","br","col","code","div","em","hr","h1","h2","h3","h4","h5","h6","i","img","li","ol","p","pre","s","small","span","sub","sup","strong","u","ul","sanitizeHtml","unsafeHtml","allowList","sanitizeFunction","length","domParser","window","DOMParser","createdDocument","parseFromString","elements","concat","body","querySelectorAll","element","elementName","Object","keys","remove","attributeList","attributes","allowedAttributes","removeAttribute","innerHTML"],"sources":["../../src/util/sanitizer.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst uriAttributes = new Set([\n  'background',\n  'cite',\n  'href',\n  'itemtype',\n  'longdesc',\n  'poster',\n  'src',\n  'xlink:href'\n])\n\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i\n\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase()\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue))\n    }\n\n    return true\n  }\n\n  // Check if a regular expression validates the attribute.\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)\n    .some(regex => regex.test(attributeName))\n}\n\nexport const DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n}\n\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml\n  }\n\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n    return sanitizeFunction(unsafeHtml)\n  }\n\n  const domParser = new window.DOMParser()\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\n\n  for (const element of elements) {\n    const elementName = element.nodeName.toLowerCase()\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove()\n\n      continue\n    }\n\n    const attributeList = [].concat(...element.attributes)\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || [])\n\n    for (const attribute of attributeList) {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName)\n      }\n    }\n  }\n\n  return createdDocument.body.innerHTML\n}\n"]},"metadata":{},"sourceType":"script"}