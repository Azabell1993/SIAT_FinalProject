{"ast":null,"code":"/*!\n  * Bootstrap manipulator.js v5.2.0 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Manipulator = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.0): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  function normalizeData(value) {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    if (value === Number(value).toString()) {\n      return Number(value);\n    }\n\n    if (value === '' || value === 'null') {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    try {\n      return JSON.parse(decodeURIComponent(value));\n    } catch (_unused) {\n      return value;\n    }\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n\n      for (const key of bsKeys) {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      }\n\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    }\n\n  };\n  return Manipulator;\n});","map":{"version":3,"mappings":";;;;;;;;;EAAA;;;;;;;EAOA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;IAC5B,IAAIA,KAAK,KAAK,MAAd,EAAsB;MACpB,OAAO,IAAP;IACD;;IAED,IAAIA,KAAK,KAAK,OAAd,EAAuB;MACrB,OAAO,KAAP;IACD;;IAED,IAAIA,KAAK,KAAKC,MAAM,CAACD,KAAD,CAANC,CAAcC,QAAdD,EAAd,EAAwC;MACtC,OAAOA,MAAM,CAACD,KAAD,CAAb;IACD;;IAED,IAAIA,KAAK,KAAK,EAAVA,IAAgBA,KAAK,KAAK,MAA9B,EAAsC;MACpC,OAAO,IAAP;IACD;;IAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOA,KAAP;IACD;;IAED,IAAI;MACF,OAAOG,IAAI,CAACC,KAALD,CAAWE,kBAAkB,CAACL,KAAD,CAA7BG,CAAP;IADF,EAEE,OAAMG,OAAN,EAAM;MACN,OAAON,KAAP;IACD;EACF;;EAED,SAASO,gBAAT,CAA0BC,GAA1B,EAA+B;IAC7B,OAAOA,GAAG,CAACC,OAAJD,CAAY,QAAZA,EAAsBE,GAAG,IAAK,IAAGA,GAAG,CAACC,WAAJD,EAAkB,EAAnDF,CAAP;EACD;;EAED,MAAMI,WAAW,GAAG;IAClBC,gBAAgB,CAACC,OAAD,EAAUN,GAAV,EAAeR,KAAf,EAAsB;MACpCc,OAAO,CAACC,YAARD,CAAgCP,2BAAgB,CAACC,GAAD,CAAhD,IAAyDR,KAAzDc;IAFgB;;IAKlBE,mBAAmB,CAACF,OAAD,EAAUN,GAAV,EAAe;MAChCM,OAAO,CAACG,eAARH,CAAyB,WAAUP,gBAAgB,CAACC,GAAD,CAAnD;IANgB;;IASlBU,iBAAiB,CAACJ,OAAD,EAAU;MACzB,IAAI,CAACA,OAAL,EAAc;QACZ,OAAO,EAAP;MACD;;MAED,MAAMK,UAAU,GAAG,EAAnB;MACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAPD,CAAYP,OAAO,CAACS,OAApBF,EAA6BG,MAA7BH,CAAoCb,GAAG,IAAIA,GAAG,CAACiB,UAAJjB,CAAe,IAAfA,KAAwB,CAACA,GAAG,CAACiB,UAAJjB,CAAe,UAAfA,CAApEa,CAAf;;MAEA,KAAK,MAAMb,GAAX,IAAkBY,MAAlB,EAA0B;QACxB,IAAIM,OAAO,GAAGlB,GAAG,CAACC,OAAJD,CAAY,KAAZA,EAAmB,EAAnBA,CAAd;QACAkB,OAAO,GAAGA,OAAO,CAACC,MAARD,CAAe,CAAfA,EAAkBf,WAAlBe,KAAkCA,OAAO,CAACE,KAARF,CAAc,CAAdA,EAAiBA,OAAO,CAACG,MAAzBH,CAA5CA;QACAP,UAAU,CAACO,OAAD,CAAVP,GAAsBpB,aAAa,CAACe,OAAO,CAACS,OAART,CAAgBN,GAAhBM,CAAD,CAAnCK;MACD;;MAED,OAAOA,UAAP;IAvBgB;;IA0BlBW,gBAAgB,CAAChB,OAAD,EAAUN,GAAV,EAAe;MAC7B,OAAOT,aAAa,CAACe,OAAO,CAACiB,YAARjB,CAAgCP,2BAAgB,CAACC,GAAD,CAAM,EAAtDM,CAAD,CAApB;IACD;;EA5BiB,CAApB","names":["normalizeData","value","Number","toString","JSON","parse","decodeURIComponent","_unused","normalizeDataKey","key","replace","chr","toLowerCase","Manipulator","setDataAttribute","element","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","Object","keys","dataset","filter","startsWith","pureKey","charAt","slice","length","getDataAttribute","getAttribute"],"sources":["../../src/dom/manipulator.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.0): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n"]},"metadata":{},"sourceType":"script"}