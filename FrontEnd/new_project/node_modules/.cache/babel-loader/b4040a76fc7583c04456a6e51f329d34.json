{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      memEmail: 'test@test.com',\n      memBirth: '1990-01-01',\n      signup: {\n        memID: null,\n        //memIDCheck:null,\n        memPW: null,\n        memPWCheck: null,\n        memName: null,\n        memAddr: null,\n        memPhone: '010-1234-5678'\n      },\n      idValidFlag: true,\n      passwordValidFlag: true,\n      idCheck: '',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    /* 아이디 정규식 */\n    idValid() {\n      if (/^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {\n        this.idValidFlag = true;\n      } else {\n        this.idValidFlag = false;\n      }\n    },\n\n    idCheckValid() {\n      if (this.signup.memID === this.idCheck) {\n        this.idCheck = true;\n      } else {\n        this.idCheck = false;\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      //console.log('ID test')\n\n      /* 정규식 검사 */\n      if (!this.idValidFlag) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else {\n        /* DB와 비교하기 */\n        axios.post('http://192.168.0.81:9292/idCheckProc', {\n          memID: this.signup.memID\n        }).then(function (idchk) {\n          if (idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        }).catch(function (error) {//console.log(error)\n        });\n      }\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n\n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {\n      console.log('ID test');\n\n      if (!this.signup.memID) {\n        alert(\"아이디를 입력해주세요!\");\n        this.$refs.memIDck.focus(); //방식으로 선택자를 찾는다.\n\n        return;\n      } else if (!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        this.$refs.memPWck.focus(); //방식으로 선택자를 찾는다.\n\n        return;\n      } else if (!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        this.$refs.memEmailck.focus(); //방식으로 선택자를 찾는다.\n\n        return;\n      } else if (!this.signup.memPWCheck) {\n        alert(\"비밀번호를 확인해주세요!\");\n        this.$refs.memPWck2.focus();\n      } else if (!this.memName) {\n        alert(\"이름을 입력해주세요!\");\n        this.$refs.memNameck.focus();\n      } else if (!this.memAddr) {\n        alert(\"주소를 입력해주세요!\");\n        this.$refs.memAddrck.focus();\n      } else {\n        axios.post('http://192.168.0.81:9292/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth\n        }).then(function (datatest) {\n          //console.log(datatest.data);\n          alert(\"회원가입 완료\");\n        }).catch(function (error) {//console.log(error)\n        });\n      }\n    } // signUpProc\n\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"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","names":["axios","defaults","headers","common","data","memEmail","memBirth","signup","memID","memPW","memPWCheck","memName","memAddr","memPhone","idValidFlag","passwordValidFlag","idCheck","passwordCheck","methods","idValid","test","idCheckValid","passwordValid","passwordCheckValid","passwordCheckFlag","checkId","alert","post","then","idchk","catch","error","checkPw","signUpProc","console","log","$refs","memIDck","focus","memPWck","memEmailck","memPWck2","memNameck","memAddrck","datatest"],"sourceRoot":"","sources":["/Users/azabell/Desktop/SIAT_FinalProject/FrontEnd/new_project/src/views/SignUpCk.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>\n      <h1>회원 약관 페이지입니다.</h1>\n     </div>\n     \n    <form action=\"/signupPage\" method=\"get\" class=\"usersignup\">\n        <input type=\"checkbox\" id=\"check_all\" v-model=\"check_all\">\n        <label for=\"check_all\">전체 동의</label>\n        \n        <input type=\"checkbox\" id=\"check_1\" class=\"normal\" v-model=\"check_1\">\n        <label for=\"check_1\">개인정보 처리방침 동의</label>\n        \n        <input type=\"checkbox\" id=\"check_2\" class=\"normal\" v-model=\"check_2\">\n        <label for=\"check_2\">서비스 이용약관 동의</label>\n        \n        <input type=\"checkbox\" id=\"check_3\" class=\"normal\" v-model=\"check_3\">\n        <label for=\"check_3\">마케팅 수신 동의</label>\n        <input type=\"reset\" value=\"초기화\">\n        <input type=\"submit\" id=\"check_submit\" value=\"회원가입 하러가기\">\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\n\nexport default {\n  \n  data() {\n    return {\n        memEmail:'test@test.com',\n        memBirth:'1990-01-01',\n        \n        signup: {\n          memID:null,\n          //memIDCheck:null,\n          memPW:null,\n          memPWCheck:null,\n          memName:null,\n          memAddr:null,\n          memPhone:'010-1234-5678',\n          },\n          idValidFlag: true,\n          passwordValidFlag: true,\n          \n          idCheck:'',\n          passwordCheck: '',\n    };\n  }, /* export default */\n  methods: {\n    /* 아이디 정규식 */\n    idValid () {\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \n        this.idValidFlag = true\n      } else {\n        this.idValidFlag = false\n      }\n    },\n    idCheckValid() {\n        if (this.signup.memID === this.idCheck) {\n        this.idCheck = true\n      } else {\n        this.idCheck = false\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid () {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true\n      } else {\n        this.passwordValidFlag = false\n      }\n    },\n     passwordCheckValid () {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true\n      } else {\n        this.passwordCheckFlag = false\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId () {\n      //console.log('ID test')\n\n      /* 정규식 검사 */\n      if(!(this.idValidFlag)) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n      } else{\n         /* DB와 비교하기 */\n      axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.signup.memID\n      })\n        .then(function (idchk) {\n          if(idchk.data.data === 'false') {\n            alert(\"사용 가능\");\n          } else {\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n          }\n        })\n        .catch(function (error) {\n          //console.log(error)\n        })\n      }\n\n    },\n    /* pw check */\n    checkPw() {\n      if(!(this.passwordValidFlag)) {\t\t\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\n        return false;\n      }\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    },\n    \n    /* 회원가입 정보 전체 넘기기 */\n    signUpProc() {    \n\n      console.log('ID test')\n\n      if(!this.signup.memID) {\n        alert(\"아이디를 입력해주세요!\");\n        this.$refs.memIDck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else if(!this.signup.memPW) {\n        alert(\"비밀번호를 입력해주세요!\");\n        this.$refs.memPWck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else if(!this.memEmail) {\n        alert(\"이메일을 입력해주세요!\");\n        this.$refs.memEmailck.focus(); //방식으로 선택자를 찾는다.\n        return;\n      } else if(!this.signup.memPWCheck) {\n        alert(\"비밀번호를 확인해주세요!\");\n        this.$refs.memPWck2.focus();\n      } else if(!this.memName) {\n        alert(\"이름을 입력해주세요!\");\n        this.$refs.memNameck.focus();\n      } else if(!this.memAddr) {\n        alert(\"주소를 입력해주세요!\");\n        this.$refs.memAddrck.focus();\n      } else{\n        axios.post('http://192.168.0.81:9292/signUpProc', {\n          memID: this.signup.memID,\n          //memIDCheck: this.signup.memIDCheck,\n          memPW: this.signup.memPW,\n          memPWCheck: this.signup.memPWCheck,\n          memName: this.signup.memName,\n          memAddr: this.signup.memAddr,\n          memPhone: this.signup.memPhone,\n          memEmail: this.memEmail,\n          memBirth: this.memBirth  \n        }) .then(function (datatest) {\n            //console.log(datatest.data);\n            alert(\"회원가입 완료\");\n          }).catch(function (error) {\n            //console.log(error)\n          })\n      }\n    } // signUpProc\n  } // methods\n\n} // export default\n</script>\n\n"]},"metadata":{},"sourceType":"module"}