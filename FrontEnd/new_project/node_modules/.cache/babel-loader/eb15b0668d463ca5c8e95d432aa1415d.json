{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\nexport default {\n  data() {\n    return {\n      signup: {\n        memID: null,\n        memIDCheck: null,\n        memPW: null,\n        memPWCheck: null,\n        memName: '',\n        memAddr: '',\n        memPhone: '',\n        memEmail: '',\n        memBirth: ''\n      },\n      idValidFlag: true,\n      passwordValidFlag: true,\n      idCheck: '',\n      passwordCheck: ''\n    };\n  },\n\n  /* export default */\n  methods: {\n    idValid() {\n      if (/^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {\n        this.idValidFlag = true;\n      } else {\n        this.idValidFlag = false;\n      }\n    },\n\n    idCheckValid() {\n      if (this.signup.memID === this.idCheck) {\n        this.idCheck = true;\n      } else {\n        this.idCheck = false;\n      }\n    },\n\n    /* 비밀번호 정규식 */\n    passwordValid() {\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\n        this.passwordValidFlag = true;\n      } else {\n        this.passwordValidFlag = false;\n      }\n    },\n\n    passwordCheckValid() {\n      if (this.signup.memPW === this.passwordCheck) {\n        this.passwordCheckFlag = true;\n      } else {\n        this.passwordCheckFlag = false;\n      }\n    },\n\n    /* 아이디 중복 체크 */\n    checkId() {\n      console.log('ID test');\n      /* 정규식 검사 */\n\n      if (!this.idValidFlag) {\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 조합의 아이디입니다.\");\n      /* DB와 비교하기 */\n\n      axios.post('http://192.168.0.81:9292/idCheckProc', {\n        memID: this.signup.memID\n      }).then(function (idchk) {\n        if (idchk.data.data === 'false') {//alert(\"사용 가능\");\n        } else {\n          alert(\"이미 누가 사용하고 있는 아이디입니다.\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    /* pw check */\n    checkPw() {\n      if (!this.passwordValidFlag) {\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\n        return false;\n      }\n\n      alert(\"사용 가능한 비밀번호 입니다.\");\n      return true;\n    }\n\n  } // methods\n\n}; // export default","map":{"version":3,"mappings":"AAgCA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,6BAA9B,IAA+D,GAA/D;AAEA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACHC,MAAM,EAAE;QACNC,KAAK,EAAC,IADA;QAENC,UAAU,EAAC,IAFL;QAGNC,KAAK,EAAC,IAHA;QAINC,UAAU,EAAC,IAJL;QAKNC,OAAO,EAAC,EALF;QAMNC,OAAO,EAAC,EANF;QAONC,QAAQ,EAAC,EAPH;QAQNC,QAAQ,EAAC,EARH;QASNC,QAAQ,EAAC;MATH,CADL;MAYDC,WAAW,EAAE,IAZZ;MAaDC,iBAAiB,EAAE,IAblB;MAeDC,OAAO,EAAC,EAfP;MAgBDC,aAAa,EAAE;IAhBd,CAAP;EAkBD,CApBY;;EAoBV;EACHC,OAAO,EAAE;IACPC,OAAM,GAAK;MACT,IAAI,iCAAiCC,IAAjC,CAAsC,KAAKhB,MAAL,CAAYC,KAAlD,CAAJ,EAA8D;QAC5D,KAAKS,WAAL,GAAmB,IAAnB;MACF,CAFA,MAEO;QACL,KAAKA,WAAL,GAAmB,KAAnB;MACF;IACD,CAPM;;IAQPO,YAAY,GAAG;MACX,IAAI,KAAKjB,MAAL,CAAYC,KAAZ,KAAsB,KAAKW,OAA/B,EAAwC;QACxC,KAAKA,OAAL,GAAe,IAAf;MACF,CAFE,MAEK;QACL,KAAKA,OAAL,GAAe,KAAf;MACF;IACD,CAdM;;IAgBP;IACAM,aAAY,GAAK;MACf,IAAI,6CAA6CF,IAA7C,CAAkD,KAAKhB,MAAL,CAAYG,KAA9D,CAAJ,EAA0E;QACxE,KAAKQ,iBAAL,GAAyB,IAAzB;MACF,CAFA,MAEO;QACL,KAAKA,iBAAL,GAAyB,KAAzB;MACF;IACD,CAvBM;;IAwBNQ,kBAAiB,GAAK;MACrB,IAAI,KAAKnB,MAAL,CAAYG,KAAZ,KAAsB,KAAKU,aAA/B,EAA8C;QAC5C,KAAKO,iBAAL,GAAyB,IAAzB;MACF,CAFA,MAEO;QACL,KAAKA,iBAAL,GAAyB,KAAzB;MACF;IACD,CA9BM;;IA+BP;IACAC,OAAM,GAAK;MACTC,OAAO,CAACC,GAAR,CAAY,SAAZ;MAEA;;MACA,IAAG,CAAE,KAAKb,WAAV,EAAwB;QACtBc,KAAK,CAAC,sBAAD,CAAL;QACA,OAAO,KAAP;MACF;;MACAA,KAAK,CAAC,oBAAD,CAAL;MAEA;;MACA7B,KAAK,CAAC8B,IAAN,CAAW,sCAAX,EAAmD;QACjDxB,KAAK,EAAE,KAAKD,MAAL,CAAYC;MAD8B,CAAnD,EAGGyB,IAHH,CAGQ,UAAUC,KAAV,EAAiB;QACrB,IAAGA,KAAK,CAAC5B,IAAN,CAAWA,IAAX,KAAoB,OAAvB,EAAgC,CAC9B;QAEF,CAHA,MAGO;UACLyB,KAAK,CAAC,uBAAD,CAAL;QACF;MACD,CAVH,EAWGI,KAXH,CAWS,UAAUC,KAAV,EAAiB;QACtBP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD,CAbH;IAcD,CAzDM;;IA0DP;IACAC,OAAO,GAAG;MACR,IAAG,CAAE,KAAKnB,iBAAV,EAA8B;QAC5Ba,KAAK,CAAC,sCAAD,CAAL;QACA,OAAO,KAAP;MACF;;MACAA,KAAK,CAAC,kBAAD,CAAL;MACA,OAAO,IAAP;IACF;;EAlEO,CArBI,CAwFX;;AAxFW,CAAf,C,CA0FE","names":["axios","defaults","headers","common","data","signup","memID","memIDCheck","memPW","memPWCheck","memName","memAddr","memPhone","memEmail","memBirth","idValidFlag","passwordValidFlag","idCheck","passwordCheck","methods","idValid","test","idCheckValid","passwordValid","passwordCheckValid","passwordCheckFlag","checkId","console","log","alert","post","then","idchk","catch","error","checkPw"],"sourceRoot":"","sources":["C:\\study\\project2\\backup\\new_project\\src\\views\\SignView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div>\r\n      <h1>Sign Up 페이지입니다.</h1>\r\n      </div>\r\n      <form action=\"/SignTest\" method=\"get\" class=\"userjoin\" @submit.prevent=\"checkId\">\r\n           <label for=\"memID\">아이디 : <input type=\"text\" id=\"memID\" v-model=\"signup.memID\" mexlength=\"20\"  @blur=\"idValid\"><p id=\"userid_msg\"></p></label>\r\n           <label for=\"memIDCheck\">아이디 확인 : <input type=\"text\" id=\"memIDCheck\" v-model=\"signup.memIDCheck\" mexlength=\"20\"  @blur=\"idCheckValid\"><p id=\"userid_msg\"></p></label>\r\n          <div v-if=\"!idValidFlag\">유효하지 않은 아이디입니다.</div>\r\n          <button>아이디 사용 가능 체크</button>\r\n      </form>\r\n\r\n      <form action=\"/PwTest\" method=\"get\" class=\"userpwcheck\" @submit.prevent=\"checkPw\">\r\n      <p>8 ~ 16자 대/소 영문, 숫자, 특수문자를 최소 한가지씩 조합하세요.</p>\r\n      <label for=\"memPW\">비밀번호 : <input type=\"password\" id=\"memPW\" v-model=\"signup.memPW\" @blur=\"passwordValid\"></label><br>\r\n      <label for=\"memPWCheck\">비밀번호 확인 : <input type=\"password\" id=\"memPWCheck\" v-model=\"signup.memPWCheck\" maxlength=\"16\" @blur=\"passwordCheckValid\"></label><br>\r\n      <div v-if=\"!passwordValidFlag\">유효하지 않은 비밀번호 입니다.</div>\r\n      <button>비밀번호 체크</button>\r\n      </form>\r\n      \r\n      <label for=\"memName\">이름 : <input type=\"text\" id=\"memName\" v-model=\"signup.memName\"></label><br>\r\n      <label for=\"memAddr\">주소 : <input type=\"text\" id=\"memAddr\" v-model=\"signup.memAddr\"></label><br>\r\n      <label for=\"memPhone\">전화번호 : <input type=\"text\" id=\"memPhone\" v-model=\"signup.memPhone\"></label><br>\r\n      <label for=\"memEmail\">이메일 : <input type=\"email\" id=\"memEmail\" v-model=\"signup.memEmail\"></label>\r\n      <br>\r\n      <label for=\"memBirth\">생년월일 : <input type=\"date\" id=\"memBirth\" v-model=\"signup.memBirth\"></label><br>\r\n      <input type=\"reset\" value=\"초기화\">\r\n      <input type=\"submit\" id=\"login_submit\" value=\"가입\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n        signup: {\r\n          memID:null,\r\n          memIDCheck:null,\r\n          memPW:null,\r\n          memPWCheck:null,\r\n          memName:'',\r\n          memAddr:'',\r\n          memPhone:'',\r\n          memEmail:'',\r\n          memBirth:''\r\n          },\r\n          idValidFlag: true,\r\n          passwordValidFlag: true,\r\n          \r\n          idCheck:'',\r\n          passwordCheck: '',\r\n    };\r\n  }, /* export default */\r\n  methods: {\r\n    idValid () {\r\n      if( /^[A-Za-z]{1}[A-Za-z0-9]{3,19}$/.test(this.signup.memID)) {        \r\n        this.idValidFlag = true\r\n      } else {\r\n        this.idValidFlag = false\r\n      }\r\n    },\r\n    idCheckValid() {\r\n        if (this.signup.memID === this.idCheck) {\r\n        this.idCheck = true\r\n      } else {\r\n        this.idCheck = false\r\n      }\r\n    },\r\n\r\n    /* 비밀번호 정규식 */\r\n    passwordValid () {\r\n      if (/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,16}$/.test(this.signup.memPW)) {\r\n        this.passwordValidFlag = true\r\n      } else {\r\n        this.passwordValidFlag = false\r\n      }\r\n    },\r\n     passwordCheckValid () {\r\n      if (this.signup.memPW === this.passwordCheck) {\r\n        this.passwordCheckFlag = true\r\n      } else {\r\n        this.passwordCheckFlag = false\r\n      }\r\n    },\r\n    /* 아이디 중복 체크 */\r\n    checkId () {\r\n      console.log('ID test')\r\n\r\n      /* 정규식 검사 */\r\n      if(!(this.idValidFlag)) {\r\n        alert(\"사용할 수 없는 조합의 아이디입니다.\");\r\n        return false;\r\n      }\r\n      alert(\"사용 가능한 조합의 아이디입니다.\");\r\n\r\n      /* DB와 비교하기 */\r\n      axios.post('http://192.168.0.81:9292/idCheckProc', {\r\n        memID: this.signup.memID\r\n      })\r\n        .then(function (idchk) {\r\n          if(idchk.data.data === 'false') {\r\n            //alert(\"사용 가능\");\r\n\r\n          } else {\r\n            alert(\"이미 누가 사용하고 있는 아이디입니다.\");\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error)\r\n        })\r\n    },\r\n    /* pw check */\r\n    checkPw() {\r\n      if(!(this.passwordValidFlag)) {\t\t\r\n        alert(\"사용할 수 없는 조합입니다.\\n패스워드 설정안내를 확인해 주세요.\");\t\t\r\n        return false;\r\n      }\r\n      alert(\"사용 가능한 비밀번호 입니다.\");\r\n      return true;\r\n    }\r\n  } // methods\r\n\r\n} // export default\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}